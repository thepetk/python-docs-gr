# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-02 23:29+0300\n"
"PO-Revision-Date: 2025-01-22 13:33+0200\n"
"Last-Translator: Marios Giannopoulos <mariosgian_2002@yahoo.gr>\n"
"Language-Team: PyGreece <organizers@pygreece.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/asyncio-queue.rst:7
msgid "Queues"
msgstr "Ουρές"

#: library/asyncio-queue.rst:9
msgid "**Source code:** :source:`Lib/asyncio/queues.py`"
msgstr "**Πηγαίος κώδικας:** :source:`Lib/asyncio/queues.py`"

#: library/asyncio-queue.rst:13
msgid ""
"asyncio queues are designed to be similar to classes of the :mod:`queue` "
"module.  Although asyncio queues are not thread-safe, they are designed to "
"be used specifically in async/await code."
msgstr ""
"Οι ουρές asyncio έχουν σχεδιαστεί ώστε να μοιάζουν με τις κλάσεις του "
"module :mod:`queue`.  Αν και οι ουρές asyncio δεν είναι ασφαλείς για χρήση "
"με νήματα (thread-safe), έχουν σχεδιαστεί για να χρησιμοποιούνται "
"συγκεκριμένα σε κώδικα async/await."

#: library/asyncio-queue.rst:17
msgid ""
"Note that methods of asyncio queues don't have a *timeout* parameter; use :"
"func:`asyncio.wait_for` function to do queue operations with a timeout."
msgstr ""
"Σημειώστε ότι οι μέθοδοι των ουρών asyncio δεν διαθέτουν παράμετρο "
"*timeout*. Χρησιμοποιήστε την συνάρτηση :func:`asyncio.wait_for` για να "
"εκτελέσετε λειτουργίες ουράς με χρονικό όριο."

#: library/asyncio-queue.rst:21
msgid "See also the `Examples`_ section below."
msgstr "Δείτε επίσης την ενότητα `Παραδείγματα`_ παρακάτω."

#: library/asyncio-queue.rst:24
msgid "Queue"
msgstr "Ουρά"

#: library/asyncio-queue.rst:28
msgid "A first in, first out (FIFO) queue."
msgstr "Μια ουρά τύπου πρώτος που εισέρχεται, πρώτος που εξέρχεται (FIFO)."

#: library/asyncio-queue.rst:30
msgid ""
"If *maxsize* is less than or equal to zero, the queue size is infinite.  If "
"it is an integer greater than ``0``, then ``await put()`` blocks when the "
"queue reaches *maxsize* until an item is removed by :meth:`get`."
msgstr ""
"Αν η τιμή του *maxsize* είναι λιγότερη ή ίση με το μηδέν, το μέγεθος της "
"ουράς είναι άπειρο.  Αν είναι ένας ακέραιος μεγαλύτερος από το ``0``, τότε η "
"εντολή ``await put()`` μπλοκάρει, όταν η ουρά φτάσει το *maxsize* μέχρι να "
"αφαιρεθεί ένα στοιχείο μέσω της μεθόδου :meth:`get`."

#: library/asyncio-queue.rst:35
msgid ""
"Unlike the standard library threading :mod:`queue`, the size of the queue is "
"always known and can be returned by calling the :meth:`qsize` method."
msgstr ""
"Σε αντίθεση με την ουρά του :mod:`queue` στην βιβλιοθήκη threading, το "
"μέγεθος της ουράς είναι πάντα γνωστό και μπορεί να επιστραφεί καλώντας τη "
"μέθοδο :meth:`qsize`."

#: library/asyncio-queue.rst:39
msgid "Removed the *loop* parameter."
msgstr "Αφαιρέθηκε η παράμετρος *loop*."

#: library/asyncio-queue.rst:43
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "Αυτή η κλάση είναι :ref:`not thread safe <asyncio-multithreading>`."

#: library/asyncio-queue.rst:47
msgid "Number of items allowed in the queue."
msgstr "Αριθμός στοιχείων που επιτρέπονται στην ουρά."

#: library/asyncio-queue.rst:51
msgid "Return ``True`` if the queue is empty, ``False`` otherwise."
msgstr "Επιστρέφει ``True`` αν η ουρά είναι άδεια, διαφορετικά ``False``."

#: library/asyncio-queue.rst:55
msgid "Return ``True`` if there are :attr:`maxsize` items in the queue."
msgstr "Επιστρέφει ``True`` αν υπάρχουν :attr:`maxsize` αντικείμενα στην ουρά."

#: library/asyncio-queue.rst:57
msgid ""
"If the queue was initialized with ``maxsize=0`` (the default), then :meth:"
"`full` never returns ``True``."
msgstr ""
"Αν η ουρά αρχικοποιήθηκε με ``maxsize=0`` (προεπιλογή), τότε η :meth:`full` "
"δεν επιστρέφει ποτέ ``True``."

#: library/asyncio-queue.rst:63
msgid ""
"Remove and return an item from the queue. If queue is empty, wait until an "
"item is available."
msgstr ""
"Αφαίρεση και επιστροφή ενός αντικειμένου από την ουρά. Αν η ουρά είναι κενή, "
"περιμένετε μέχρι να είναι διαθέσιμο ένα αντικείμενο."

#: library/asyncio-queue.rst:68
msgid ""
"Return an item if one is immediately available, else raise :exc:`QueueEmpty`."
msgstr ""
"Επιστρέφει ένα αντικείμενο, αν είναι άμεσα διαθέσιμο, αλλιώς κάνε raise την :"
"exc:`QueueEmpty`."

#: library/asyncio-queue.rst:74
msgid "Block until all items in the queue have been received and processed."
msgstr ""
"Αποκλείει μέχρι να ληφθούν και να υποβληθούν σε επεξεργασία όλα τα στοιχεία "
"στην ουρά."

#: library/asyncio-queue.rst:76
msgid ""
"The count of unfinished tasks goes up whenever an item is added to the "
"queue. The count goes down whenever a consumer coroutine calls :meth:"
"`task_done` to indicate that the item was retrieved and all work on it is "
"complete.  When the count of unfinished tasks drops to zero, :meth:`join` "
"unblocks."
msgstr ""
"Ο αριθμός των ημιτελών εργασιών αυξάνεται κάθε φορά που προστίθεται ένα "
"αντικείμενο στην ουρά. Ο αριθμός μειώνεται όταν μια καταναλωτική coroutine "
"καλεί τη μέθοδο :meth:`task_done` για να υποδείξει ότι το αντικείμενο "
"λήφθηκε και η εργασία πάνω του έχει ολοκληρωθεί.  Όταν ο αριθμός των "
"ατελείωτων εργασιών μειωθεί στο μηδέν, η μέθοδος :meth:`join` αποδεσμεύεται."

#: library/asyncio-queue.rst:85
msgid ""
"Put an item into the queue. If the queue is full, wait until a free slot is "
"available before adding the item."
msgstr ""
"Τοποθετεί ένα αντικείμενο στην ουρά. Αν η ουρά είναι γεμάτη, περιμένετε "
"μέχρι να είναι διαθέσιμη μια ελεύθερη θέση, πριν προσθέσετε το αντικείμενο."

#: library/asyncio-queue.rst:90
msgid "Put an item into the queue without blocking."
msgstr "Τοποθετεί ένα αντικείμενο στην ουρά χωρίς να μπλοκάρει."

#: library/asyncio-queue.rst:92
msgid "If no free slot is immediately available, raise :exc:`QueueFull`."
msgstr ""
"Αν δεν είναι διαθέσιμη μια ελεύθερη θέση αμέσως, γίνεται raise η :exc:"
"`QueueFull`."

#: library/asyncio-queue.rst:96
msgid "Return the number of items in the queue."
msgstr "Επιστρέφει τον αριθμό των αντικειμένων στην ουρά."

#: library/asyncio-queue.rst:100
msgid "Indicate that a formerly enqueued work item is complete."
msgstr ""
"Υποδεικνύει ότι μια εργασία που είχε προστεθεί στην ουρά έχει ολοκληρωθεί."

#: library/asyncio-queue.rst:102
msgid ""
"Used by queue consumers. For each :meth:`~Queue.get` used to fetch a work "
"item, a subsequent call to :meth:`task_done` tells the queue that the "
"processing on the work item is complete."
msgstr ""
"Χρησιμοποιείται από τους καταναλωτές της ουράς. Για κάθε κλήση της :meth:"
"`~Queue.get` για να ανακτηθεί μια εργασία, μια επακόλουθη κλήση της :meth:"
"`task_done` ενημερώνει την ουρά ότι η επεξεργασία της εργασίας έχει "
"ολοκληρωθεί."

#: library/asyncio-queue.rst:106
msgid ""
"If a :meth:`join` is currently blocking, it will resume when all items have "
"been processed (meaning that a :meth:`task_done` call was received for every "
"item that had been :meth:`~Queue.put` into the queue)."
msgstr ""
"Εάν μια κλήση της :meth:`join` μπλοκάρει αυτή την στιγμή, θα συνεχιστεί όταν "
"όλα τα αντικείμενα έχουν επεξεργαστεί (σημαίνει ότι λήφθηκε μια κλήση της :"
"meth:`task_done` για κάθε αντικείμενο που είχε προστεθεί με :meth:`~Queue."
"put` στην ουρά)."

#: library/asyncio-queue.rst:111
msgid ""
"Raises :exc:`ValueError` if called more times than there were items placed "
"in the queue."
msgstr ""
"Κάνει raise την :exc:`ValueError` εάν κληθεί περισσότερες φορές από όσες τα "
"αντικείμενα που είχαν τοποθετηθεί στην ουρά."

#: library/asyncio-queue.rst:116
msgid "Priority Queue"
msgstr "Σειρά Προτεραιότητας"

#: library/asyncio-queue.rst:120
msgid ""
"A variant of :class:`Queue`; retrieves entries in priority order (lowest "
"first)."
msgstr ""
"Μια παραλλαγή της :class:`Queue`; η οποία ανακτά τις καταχωρήσεις με σειρά "
"προτεραιότητας (οι χαμηλότερες πρώτες)."

#: library/asyncio-queue.rst:123
msgid "Entries are typically tuples of the form ``(priority_number, data)``."
msgstr "Οι καταχωρήσεις είναι συνήθως της μορφής ``(priority_number, data)``."

#: library/asyncio-queue.rst:128
msgid "LIFO Queue"
msgstr "Ουρά LIFO"

#: library/asyncio-queue.rst:132
msgid ""
"A variant of :class:`Queue` that retrieves most recently added entries first "
"(last in, first out)."
msgstr ""
"Μια παραλλαγή της κλάσης :class:`Queue` που ανακτά τις πιο πρόσφατα "
"προστιθέμενες καταχωρίσεις πρώτες (με τη λογική τελευταίος μέσα, πρώτος έξω)."

#: library/asyncio-queue.rst:137
msgid "Exceptions"
msgstr "Εξαιρέσεις"

#: library/asyncio-queue.rst:141
msgid ""
"This exception is raised when the :meth:`~Queue.get_nowait` method is called "
"on an empty queue."
msgstr ""
"Αυτή η εξαίρεση γίνεται raise όταν η μέθοδος :meth:`~Queue.get_nowait` "
"καλείται σε μια άδεια ουρά."

#: library/asyncio-queue.rst:147
msgid ""
"Exception raised when the :meth:`~Queue.put_nowait` method is called on a "
"queue that has reached its *maxsize*."
msgstr ""
"Εξαίρεση που γίνεται raise όταν η μέθοδος :meth:`~Queue.put_nowait` καλείται "
"σε μια ουρά που έχει φτάσει στο *maxsize* της."

#: library/asyncio-queue.rst:152
msgid "Examples"
msgstr "Παραδείγματα"

#: library/asyncio-queue.rst:156
msgid ""
"Queues can be used to distribute workload between several concurrent tasks::"
msgstr ""
"Οι ουρές μπορούν να χρησιμοποιηθούν για τη διανομή εργασίας μεταξύ αρκετών "
"παράλληλων εργασιών::"

#: library/asyncio-queue.rst:159
msgid ""
"import asyncio\n"
"import random\n"
"import time\n"
"\n"
"\n"
"async def worker(name, queue):\n"
"    while True:\n"
"        # Get a \"work item\" out of the queue.\n"
"        sleep_for = await queue.get()\n"
"\n"
"        # Sleep for the \"sleep_for\" seconds.\n"
"        await asyncio.sleep(sleep_for)\n"
"\n"
"        # Notify the queue that the \"work item\" has been processed.\n"
"        queue.task_done()\n"
"\n"
"        print(f'{name} has slept for {sleep_for:.2f} seconds')\n"
"\n"
"\n"
"async def main():\n"
"    # Create a queue that we will use to store our \"workload\".\n"
"    queue = asyncio.Queue()\n"
"\n"
"    # Generate random timings and put them into the queue.\n"
"    total_sleep_time = 0\n"
"    for _ in range(20):\n"
"        sleep_for = random.uniform(0.05, 1.0)\n"
"        total_sleep_time += sleep_for\n"
"        queue.put_nowait(sleep_for)\n"
"\n"
"    # Create three worker tasks to process the queue concurrently.\n"
"    tasks = []\n"
"    for i in range(3):\n"
"        task = asyncio.create_task(worker(f'worker-{i}', queue))\n"
"        tasks.append(task)\n"
"\n"
"    # Wait until the queue is fully processed.\n"
"    started_at = time.monotonic()\n"
"    await queue.join()\n"
"    total_slept_for = time.monotonic() - started_at\n"
"\n"
"    # Cancel our worker tasks.\n"
"    for task in tasks:\n"
"        task.cancel()\n"
"    # Wait until all worker tasks are cancelled.\n"
"    await asyncio.gather(*tasks, return_exceptions=True)\n"
"\n"
"    print('====')\n"
"    print(f'3 workers slept in parallel for {total_slept_for:.2f} seconds')\n"
"    print(f'total expected sleep time: {total_sleep_time:.2f} seconds')\n"
"\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"import random\n"
"import time\n"
"\n"
"\n"
"async def worker(name, queue):\n"
"    while True:\n"
"        # Get a \"work item\" out of the queue.\n"
"        sleep_for = await queue.get()\n"
"\n"
"        # Sleep for the \"sleep_for\" seconds.\n"
"        await asyncio.sleep(sleep_for)\n"
"\n"
"        # Notify the queue that the \"work item\" has been processed.\n"
"        queue.task_done()\n"
"\n"
"        print(f'{name} has slept for {sleep_for:.2f} seconds')\n"
"\n"
"\n"
"async def main():\n"
"    # Create a queue that we will use to store our \"workload\".\n"
"    queue = asyncio.Queue()\n"
"\n"
"    # Generate random timings and put them into the queue.\n"
"    total_sleep_time = 0\n"
"    for _ in range(20):\n"
"        sleep_for = random.uniform(0.05, 1.0)\n"
"        total_sleep_time += sleep_for\n"
"        queue.put_nowait(sleep_for)\n"
"\n"
"    # Create three worker tasks to process the queue concurrently.\n"
"    tasks = []\n"
"    for i in range(3):\n"
"        task = asyncio.create_task(worker(f'worker-{i}', queue))\n"
"        tasks.append(task)\n"
"\n"
"    # Wait until the queue is fully processed.\n"
"    started_at = time.monotonic()\n"
"    await queue.join()\n"
"    total_slept_for = time.monotonic() - started_at\n"
"\n"
"    # Cancel our worker tasks.\n"
"    for task in tasks:\n"
"        task.cancel()\n"
"    # Wait until all worker tasks are cancelled.\n"
"    await asyncio.gather(*tasks, return_exceptions=True)\n"
"\n"
"    print('====')\n"
"    print(f'3 workers slept in parallel for {total_slept_for:.2f} seconds')\n"
"    print(f'total expected sleep time: {total_sleep_time:.2f} seconds')\n"
"\n"
"\n"
"asyncio.run(main())"
