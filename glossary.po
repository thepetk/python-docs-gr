# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2024, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-10 10:19+0300\n"
"PO-Revision-Date: 2025-05-10 22:47+0300\n"
"Last-Translator: Panagiotis Skias <panagiotis.skias@gmail.com>\n"
"Language-Team: PyGreece <organizers@pygreece.org>\n"
"Language: el\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.2\n"

#: glossary.rst:5
msgid "Glossary"
msgstr "Γλωσσάρι"

#: glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: glossary.rst:12
msgid ""
"The default Python prompt of the :term:`interactive` shell.  Often seen for "
"code examples which can be executed interactively in the interpreter."
msgstr ""
"Η προεπιλεγμένη Python εντολή του :term:`interactive` shell. Συχνά "
"εμφανίζεται για παραδείγματα κώδικα που μπορούν να εκτελεστούν διαδραστικά "
"στον interpreter."

#: glossary.rst:15
msgid "``...``"
msgstr "``...``"

#: glossary.rst:17
msgid "Can refer to:"
msgstr "Μπορεί να αναφέρεται σε:"

#: glossary.rst:19
msgid ""
"The default Python prompt of the :term:`interactive` shell when entering the "
"code for an indented code block, when within a pair of matching left and "
"right delimiters (parentheses, square brackets, curly braces or triple "
"quotes), or after specifying a decorator."
msgstr ""
"Η προεπιλεγμένη Python εντολή του :term:`interactive` shell κατά την "
"εισαγωγή του κώδικα για ένα μπλοκ κώδικα με εσοχή, όταν βρίσκεται μέσα σε "
"ένα ζεύγος ταιριασμένων αριστερών και δεξιών delimiters (παρενθέσεις, "
"αγκύλες, άγκιστρα ή τριπλά εισαγωγικά), ή μετά τον καθορισμό ενός decorator."

#: glossary.rst:24
msgid "The :const:`Ellipsis` built-in constant."
msgstr "Η ενσωματωμένη σταθερά :const:`Ellipsis`."

#: glossary.rst:25
msgid "abstract base class"
msgstr "αφηρημένη βασική κλάση"

#: glossary.rst:27
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy "
"or subtly wrong (for example with :ref:`magic methods <special-lookup>`).  "
"ABCs introduce virtual subclasses, which are classes that don't inherit from "
"a class but are still recognized by :func:`isinstance` and :func:"
"`issubclass`; see the :mod:`abc` module documentation.  Python comes with "
"many built-in ABCs for data structures (in the :mod:`collections.abc` "
"module), numbers (in the :mod:`numbers` module), streams (in the :mod:`io` "
"module), import finders and loaders (in the :mod:`importlib.abc` module).  "
"You can create your own ABCs with the :mod:`abc` module."
msgstr ""
"Οι αφηρημένες βασικές κλάσεις συμπληρώνουν το :term:`duck-typing` παρέχοντας "
"έναν τρόπο ορισμού interfaces όταν άλλες τεχνικές όπως η :func:`hasattr` θα "
"ήταν αδέξιες ή ανεπαίσθητα λανθασμένες (για παράδειγμα με :ref:`magic "
"methods <special-lookup>`). Τα ABC (abstract base class) εισάγουν εικονικές "
"υποκλάσεις, οι οποίες είναι κλάσεις που δεν κληρονομούνται από μια κλάση, "
"αλλά εξακολουθούν να αναγνωρίζονται από το :func:`isinstance` και από το :"
"func:`issubclass`' βλ. την τεκμηρίωση του module :mod:`abc`. Η Python "
"διαθέτει πολλά ενσωματωμένα ABC για δομές δεδομένων (στο module :mod:"
"`collections.abc`), αριθμούς (στο module :mod:`numbers`), ροές (στο module "
"μονάδα :mod:`io`), εισαγωγή finders και loaders (στο module :mod:`importlib."
"abc`). Μπορείτε να δημιουργήσετε τα δικά σας ABC με το module :mod:`abc`."

#: glossary.rst:38
msgid "annotate function"
msgstr "συνάρτηση annotate"

#: glossary.rst:40
msgid ""
"A function that can be called to retrieve the :term:`annotations "
"<annotation>` of an object. This function is accessible as the :attr:"
"`~object.__annotate__` attribute of functions, classes, and modules. "
"Annotate functions are a subset of :term:`evaluate functions <evaluate "
"function>`."
msgstr ""
"Μια συνάρτηση που μπορεί να κληθεί για να ανακτήσει το :term:`annotations "
"<annotation>` ενός αντικειμένου. Αυτή η συνάρτηση είναι προσβάσιμη ως το "
"χαρακτηριστικό :attr:`~object.__annotate__` των συναρτήσεων, των κλάσεων και "
"των modules. Οι συναρτήσεις annotate είναι ένα υποσύνολο του :term:`evaluate "
"functions <evaluate function>`."

#: glossary.rst:44
msgid "annotation"
msgstr "annotation"

#: glossary.rst:46
msgid ""
"A label associated with a variable, a class attribute or a function "
"parameter or return value, used by convention as a :term:`type hint`."
msgstr ""
"Μια ετικέτα που σχετίζεται με μια μεταβλητή, ένα χαρακτηριστικό κλάσης ή μια "
"παράμετρος συνάρτησης ή τιμή που επιστρέφεται, που χρησιμοποιείται κατά "
"σύμβαση ως :term:`type hint`."

#: glossary.rst:50
msgid ""
"Annotations of local variables cannot be accessed at runtime, but "
"annotations of global variables, class attributes, and functions can be "
"retrieved by calling :func:`annotationlib.get_annotations` on modules, "
"classes, and functions, respectively."
msgstr ""
"Δεν είναι δυνατή η πρόσβαση στα annotations των τοπικών μεταβλητών κατά το "
"χρόνο εκτέλεσης, αλλά τα annotations των global μεταβλητών, των "
"χαρακτηριστικών κλάσης και των συναρτήσεων μπορούν να ανακτηθούν καλώντας "
"την εντολή :func:`annotationlib.get_annotations` σε modules, κλάσεις και "
"συναρτήσεις, αντίστοιχα."

#: glossary.rst:55
msgid ""
"See :term:`variable annotation`, :term:`function annotation`, :pep:`484`, :"
"pep:`526`, and :pep:`649`, which describe this functionality. Also see :ref:"
"`annotations-howto` for best practices on working with annotations."
msgstr ""
"Βλ. τα :term:`variable annotation`, :term:`function annotation`, :pep:"
"`484`, :pep:`526` και :pep:`649`, τα οποία περιγράφουν την λειτουργικότητα. "
"Δείτε επίσης τα :ref:`annotations-howto` για τις βέλτιστες πρακτικές "
"δουλεύοντας με annotations."

#: glossary.rst:59
msgid "argument"
msgstr "όρισμα"

#: glossary.rst:61
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two kinds of argument:"
msgstr ""
"Μια τιμή μεταβιβάζεται σε μία :term:`function` (ή :term:`method`) κατά την "
"κλήση της συνάρτησης.  Υπάρχουν δύο είδη ορισμάτων:"

#: glossary.rst:64
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`keyword argument`: ένα όρισμα πριν από ένα αναγνωριστικό (π.χ. "
"``name=``) σε μια κλήση συνάρτησης ή περνώντας το ως τιμή σε ένα λεξικό πριν "
"από ``**``. Για παράδειγμα, το ``3`` και το ``5`` αποτελούν ορίσματα λέξεων-"
"κλειδιών στις ακόλουθες κλήσεις προς :func:`complex`::"

#: glossary.rst:69
msgid ""
"complex(real=3, imag=5)\n"
"complex(**{'real': 3, 'imag': 5})"
msgstr ""
"complex(real=3, imag=5)\n"
"complex(**{'real': 3, 'imag': 5})"

#: glossary.rst:72
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example, "
"``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`positional argument`: ένα όρισμα που δεν είναι όρισμα keyword. Τα "
"ορίσματα θέσης μπορούν να εμφανίζονται στην αρχής μιας λίστας ορισμάτων ή/"
"και να μεταβιβάζονται ως στοιχεία ενός :term:`iterable` πριν από ``*``. Για "
"παράδειγμα, το ``3`` και το ``5`` αποτελούν ορίσματα θέσης στις παρακάτω "
"κλήσεις::"

#: glossary.rst:78
msgid ""
"complex(3, 5)\n"
"complex(*(3, 5))"
msgstr ""
"complex(3, 5)\n"
"complex(*(3, 5))"

#: glossary.rst:81
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Τα ορίσματα εκχωρούνται στις ονομασμένες τοπικές μεταβλητές στο σώμα μια "
"συνάρτησης. Βλ. την ενότητα :ref:`calls` για τους κανόνες που διέπουν αυτήν "
"την εκχώρηση. Συντακτικά, οποιαδήποτε έκφραση μπορεί να χρησιμοποιηθεί για "
"να αναπαραστήσει ένα όρισμα' η αξιολογούμενη τιμή εκχωρείται σε μια τοπική "
"μεταβλητή."

#: glossary.rst:86
msgid ""
"See also the :term:`parameter` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and :pep:`362`."
msgstr ""
"Βλ. επίσης την εγγραφή του γλωσσαρίου για το :term:`parameter`, την FAQ "
"ερώτηση στο :ref:`η διαφορά μεταξύ ορισμάτων και παραμέτρων <faq-argument-vs-"
"parameter>`, και :pep:`362`."

#: glossary.rst:89
msgid "asynchronous context manager"
msgstr "ασύγχρονος διαχειριστής context"

#: glossary.rst:91
msgid ""
"An object which controls the environment seen in an :keyword:`async with` "
"statement by defining :meth:`~object.__aenter__` and :meth:`~object."
"__aexit__` methods.  Introduced by :pep:`492`."
msgstr ""
"Ένα αντικείμενο που ελέγχει το ορατό περιβάλλον σε μια δήλωση :keyword:"
"`async with` ορίζοντας τις μεθόδους :meth:`~object.__aenter__` και :meth:"
"`~object.__aexit__`. Που εισήχθη από :pep:`492`."

#: glossary.rst:94
msgid "asynchronous generator"
msgstr "ασύγχρονος generator"

#: glossary.rst:96
msgid ""
"A function which returns an :term:`asynchronous generator iterator`.  It "
"looks like a coroutine function defined with :keyword:`async def` except "
"that it contains :keyword:`yield` expressions for producing a series of "
"values usable in an :keyword:`async for` loop."
msgstr ""
"Μια συνάρτηση που επιστρέφει έναν :term:`asynchronous generator iterator`. "
"Μοιάζει με μια συνάρτηση coroutine που ορίζεται με :keyword:`async def` "
"εκτός από ότι περιέχει εκφράσεις :keyword:`yield` για την παραγωγή μιας "
"σειράς τιμών που μπορούν να χρησιμοποιηθούν σε έναν :keyword:`async for` "
"βρόχο."

#: glossary.rst:101
msgid ""
"Usually refers to an asynchronous generator function, but may refer to an "
"*asynchronous generator iterator* in some contexts.  In cases where the "
"intended meaning isn't clear, using the full terms avoids ambiguity."
msgstr ""
"Συνήθως αναφέρεται σε μια συνάρτηση ασύγχρονου generator, αλλά μπορεί να "
"αναφέρεται σε έναν *ασύγχρονο generator iterator* σε ορισμένα contexts. Σε "
"περιπτώσεις όπου το επιδιωκόμενο νόημα δεν είναι σαφές, με την χρήση των "
"πλήρων όρων αποφεύγεται η ασάφεια."

#: glossary.rst:105
msgid ""
"An asynchronous generator function may contain :keyword:`await` expressions "
"as well as :keyword:`async for`, and :keyword:`async with` statements."
msgstr ""
"Μια συνάρτηση ασύγχρονου generator μπορεί να περιέχει εκφράσεις :keyword:"
"`await` , καθώς και δηλώσεις :keyword:`async for`, και :keyword:`async with`."

#: glossary.rst:108
msgid "asynchronous generator iterator"
msgstr "ασύγχρονος generator iterator"

#: glossary.rst:110
msgid "An object created by a :term:`asynchronous generator` function."
msgstr ""
"Ένα αντικείμενο που δημιουργήθηκε από μια συνάρτηση :term:`asynchronous "
"generator`."

#: glossary.rst:112
msgid ""
"This is an :term:`asynchronous iterator` which when called using the :meth:"
"`~object.__anext__` method returns an awaitable object which will execute "
"the body of the asynchronous generator function until the next :keyword:"
"`yield` expression."
msgstr ""
"Αυτός είναι ένας :term:`asynchronous iterator` που όταν καλείται "
"χρησιμοποιώντας την μέθοδο :meth:`~object.__anext__` επιστρέφει ένα "
"αναμενόμενο αντικείμενο που θα εκτελέσει στο σώμα της συνάρτησης του "
"ασύγχρονου generator μέχρι την επόμενη :keyword:`yield` έκφραση."

#: glossary.rst:117
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"execution state (including local variables and pending try-statements).  "
"When the *asynchronous generator iterator* effectively resumes with another "
"awaitable returned by :meth:`~object.__anext__`, it picks up where it left "
"off.  See :pep:`492` and :pep:`525`."
msgstr ""
"Κάθε :keyword:`yield` αναστέλλει προσωρινά την επεξεργασία, θυμάται την "
"κατάσταση εκτέλεσης (συμπεριλαμβανομένων των τοπικών μεταβλητών και των "
"δηλώσεων `try` σε εκκρεμότητα). Όταν ο *ασύγχρονος generator iterator* "
"συνεχίσει αποτελεσματικά με άλλο αναμενόμενο που επιστρέφεται από :meth:"
"`~object.__anext__ `, συνεχίζει από εκεί που σταμάτησε. Βλ. :pep:`492` και :"
"pep:`525`."

#: glossary.rst:122
msgid "asynchronous iterable"
msgstr "ασύγχρονος iterable"

#: glossary.rst:124
msgid ""
"An object, that can be used in an :keyword:`async for` statement. Must "
"return an :term:`asynchronous iterator` from its :meth:`~object.__aiter__` "
"method.  Introduced by :pep:`492`."
msgstr ""
"Ένα αντικείμενο, που μπορεί να χρησιμοποιηθεί σε μια δήλωση :keyword:`async "
"for`. Πρέπει να επιστρέφει ένα :term:`asynchronous iterator` από την μέθοδο :"
"meth:`~object.__aiter__`. Που εισήχθη από :pep:`492`."

#: glossary.rst:127
msgid "asynchronous iterator"
msgstr "ασύγχρονος iterator"

#: glossary.rst:129
msgid ""
"An object that implements the :meth:`~object.__aiter__` and :meth:`~object."
"__anext__` methods.  :meth:`~object.__anext__` must return an :term:"
"`awaitable` object. :keyword:`async for` resolves the awaitables returned by "
"an asynchronous iterator's :meth:`~object.__anext__` method until it raises "
"a :exc:`StopAsyncIteration` exception.  Introduced by :pep:`492`."
msgstr ""
"Ένα αντικείμενο που υλοποιεί τις μεθόδους :meth:`~object.__aiter__` και :"
"meth:`~object.__anext__`. Η μέθοδος :meth:`~object.__anext__` πρέπει να "
"επιστρέφει ένα :term:`awaitable` αντικείμενο. Το :keyword:`async for` "
"επιλύει τα αναμενόμενα που επιστρέφονται από τη μέθοδο :meth:`~object."
"__anext__` ενός ασύγχρονου iterator έως ότου εγείρει μια εξαίρεση :exc:"
"`StopAsyncIteration`. Εισήχθη από :pep:`492`."

#: glossary.rst:134
msgid "attached thread state"
msgstr "κατάσταση συνδεδεμένου νήματος"

#: glossary.rst:137
msgid "A :term:`thread state` that is active for the current OS thread."
msgstr ""
"Ένα :term:`thread state` που είναι ενεργή για το τρέχον νήμα του "
"λειτουργικού συστήματος."

#: glossary.rst:139
msgid ""
"When a :term:`thread state` is attached, the OS thread has access to the "
"full Python C API and can safely invoke the bytecode interpreter."
msgstr ""
"Όταν επισυνάπτεται ένας :term:`thread state`, το νήμα του λειτουργικού "
"συστήματος έχει πρόσβαση στο πλήρες Python C API και μπορεί να καλέσει με "
"ασφάλεια τον διερμηνέα bytecode."

#: glossary.rst:143
msgid ""
"Unless a function explicitly notes otherwise, attempting to call the C API "
"without an attached thread state will result in a fatal error or undefined "
"behavior.  A thread state can be attached and detached explicitly by the "
"user through the C API, or implicitly by the runtime, including during "
"blocking C calls and by the bytecode interpreter in between calls."
msgstr ""
"Εκτός εάν μια συνάρτηση αναφέρει ρητά το αντίθετο, η προσπάθεια κλήσης του C "
"API χωρίς μια συνημμένη κατάσταση νήματος θα οδηγήσει ένα μοιραίο σφάλμα ή "
"σε απροσδιόριστη συμπεριφορά.  Μια κατάσταση νήματος μπορεί να συνδεθεί και "
"να αποσυνδεθεί ρητά από τον χρήση μέσω του C API ή έμμεσα από τον χρόνο "
"εκτέλεσης, συμπεριλαμβανομένων των κλήσεων αποκλεισμού C και από τον "
"διερμηνέα bytecode μεταξύ των κλήσεων."

#: glossary.rst:150
msgid ""
"On most builds of Python, having an attached thread state implies that the "
"caller holds the :term:`GIL` for the current interpreter, so only one OS "
"thread can have an attached thread state at a given moment. In :term:`free-"
"threaded <free threading>` builds of Python, threads can concurrently hold "
"an attached thread state, allowing for true parallelism of the bytecode "
"interpreter."
msgstr ""
"Στις περισσότερες εκδόσεις της Python, η ύπαρξη μιας κατάσταση συνδεδεμένου "
"νήματος υπονοεί ότι ο καλών διατηρεί την :term:`GIL` για τον τρέχοντα "
"διερμηνέα, επομένως μόνο ένα νήμα λειτουργικού συστήματος μπορεί να έχει μια "
"κατάσταση συνδεδεμένου νήματος σε μια δεδομένη στιγμή. Στις εκδόσεις :term:"
"`free-threaded <free threading>` της Python, τα νήματα μπορούν να διατηρούν "
"ταυτόχρονα μια κατάσταση συνδεδεμένου νήματος, επιτρέποντας την πραγματική "
"παραλληλία του διερμηνέα bytecode."

#: glossary.rst:156
msgid "attribute"
msgstr "χαρακτηριστικό"

#: glossary.rst:158
msgid ""
"A value associated with an object which is usually referenced by name using "
"dotted expressions. For example, if an object *o* has an attribute *a* it "
"would be referenced as *o.a*."
msgstr ""
"Μια τιμή που σχετίζεται με ένα αντικείμενο που συνήθως αναφέρεται με όνομα "
"χρησιμοποιώντας εκφράσεις με κουκκίδες. Για παράδειγμα, εάν ένα αντικείμενο "
"*o* έχει ένα χαρακτηριστικό *a* θα αναφέρεται ως *o.a*."

#: glossary.rst:163
msgid ""
"It is possible to give an object an attribute whose name is not an "
"identifier as defined by :ref:`identifiers`, for example using :func:"
"`setattr`, if the object allows it. Such an attribute will not be accessible "
"using a dotted expression, and would instead need to be retrieved with :func:"
"`getattr`."
msgstr ""
"Είναι δυνατό να δώσουμε σε ένα αντικείμενο ένα χαρακτηριστικό που το όνομα "
"του δεν είναι αναγνωριστικό όπως ορίζεται από :ref:`identifiers`, για "
"παράδειγμα χρησιμοποιώντας :func:`setattr`, αν επιτρέπεται από το "
"αντικείμενο. Ένα τέτοιο χαρακτηριστικό δεν θα είναι προσβάσιμο "
"χρησιμοποιώντας τις τελείες, και αντί αυτού θα πρέπει να ανακτηθεί "
"χρησιμοποιώντας :func:`getattr`."

#: glossary.rst:168
msgid "awaitable"
msgstr "awaitable"

#: glossary.rst:170
msgid ""
"An object that can be used in an :keyword:`await` expression.  Can be a :"
"term:`coroutine` or an object with an :meth:`~object.__await__` method. See "
"also :pep:`492`."
msgstr ""
"Ένα αντικείμενο που μπορεί να χρησιμοποιηθεί στην έκφραση :keyword:`await`. "
"Μπορεί να είναι :term:`coroutine` ή ένα αντικείμενο με μια :meth:`~object."
"__await__` μέθοδο. Βλ. επίσης :pep:`492`."

#: glossary.rst:173
msgid "BDFL"
msgstr "BDFL"

#: glossary.rst:175
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum <https://gvanrossum."
"github.io/>`_, Python's creator."
msgstr ""
"Ακρωνύμιο του *Benevolent Dictator For Life*, καλοκάγαθος δικτάτορας της "
"ζωής, δηλαδή `Guido van Rossum <https://gvanrossum.github.io/>`_, ο "
"δημιουργός της Python."

#: glossary.rst:177
msgid "binary file"
msgstr "δυαδικό αρχείο"

#: glossary.rst:179
msgid ""
"A :term:`file object` able to read and write :term:`bytes-like objects "
"<bytes-like object>`. Examples of binary files are files opened in binary "
"mode (``'rb'``, ``'wb'`` or ``'rb+'``), :data:`sys.stdin.buffer <sys."
"stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, and instances of :class:`io."
"BytesIO` and :class:`gzip.GzipFile`."
msgstr ""
"Ένα :term:`file object` ικανό να διαβάζει και να γράφει :term:`δυαδικού "
"τύπου αντικείμενα <bytes-like object>`. Παραδείγματα δυαδικών αρχείων είναι "
"αρχεία που ανοίγουν σε δυαδική λειτουργία (``'rb'``, ``'wb'`` ή ``'rb+'``), :"
"data:`sys.stdin.buffer <sys.stdin>`, :data:`sys.stdout.buffer <sys.stdout>`, "
"και στιγμιοτύπων των :class:`io.BytesIO` και :class:`gzip.GzipFile`."

#: glossary.rst:186
msgid ""
"See also :term:`text file` for a file object able to read and write :class:"
"`str` objects."
msgstr ""
"Βλ. επίσης :term:`text file` για ένα αντικείμενο τύπου αρχείο ικανό να "
"διαβάσει και να γράψει :class:`str` αντικείμενα."

#: glossary.rst:188
msgid "borrowed reference"
msgstr "δανεική αναφορά"

#: glossary.rst:190
msgid ""
"In Python's C API, a borrowed reference is a reference to an object, where "
"the code using the object does not own the reference. It becomes a dangling "
"pointer if the object is destroyed. For example, a garbage collection can "
"remove the last :term:`strong reference` to the object and so destroy it."
msgstr ""
"Στο C API της Python, μια δανεική αναφορά είναι μια αναφορά σε ένα "
"αντικείμενο, όπου ο κώδικας που χρησιμοποιεί το αντικείμενο δεν κατέχει την "
"αναφορά. Γίνεται ένας αχρησιμοποίητος δείκτης εάν το αντικείμενο "
"καταστραφεί. Για παράδειγμα, μια διαδικασία garbage collection μπορεί να "
"αφαιρέσει το τελευταίο :term:`strong reference` από το αντικείμενο και έτσι "
"να το καταστρέψει."

#: glossary.rst:196
msgid ""
"Calling :c:func:`Py_INCREF` on the :term:`borrowed reference` is recommended "
"to convert it to a :term:`strong reference` in-place, except when the object "
"cannot be destroyed before the last usage of the borrowed reference. The :c:"
"func:`Py_NewRef` function can be used to create a new :term:`strong "
"reference`."
msgstr ""
"Συνίσταται η κλήση του :c:func:`Py_INCREF` στο :term:`δανεική αναφορά "
"<borrowed reference>` με σκοπό να μετατραπεί σε ένα :term:`ισχυρή αναφορά "
"<strong reference>` επιτόπου, εκτός όταν το αντικείμενο δεν μπορεί να "
"καταστραφεί πριν από την τελευταία χρήση της δανεικής αναφοράς. Η συνάρτηση :"
"c:func:`Py_NewRef` μπορεί να χρησιμοποιηθεί ώστε να δημιουργηθεί ένα :term:"
"`ισχυρή αναφορά <strong reference>`."

#: glossary.rst:201
msgid "bytes-like object"
msgstr "bytes-like αντικείμενα"

#: glossary.rst:203
msgid ""
"An object that supports the :ref:`bufferobjects` and can export a C-:term:"
"`contiguous` buffer. This includes all :class:`bytes`, :class:`bytearray`, "
"and :class:`array.array` objects, as well as many common :class:`memoryview` "
"objects.  Bytes-like objects can be used for various operations that work "
"with binary data; these include compression, saving to a binary file, and "
"sending over a socket."
msgstr ""
"Ένα αντικείμενο που υποστηρίζει το :ref:`bufferobjects` και μπορεί να εξάγει "
"ένα C-:term:`contiguous` buffer. Αυτό περιλαμβάνει όλα τα αντικείμενα :class:"
"`bytes`, :class:`bytearray`, και :class:`array.array`, καθώς και πολλά "
"κοινά :class:`memoryview` αντικείμενα. Τα δυαδικού τύπου (bytes-like) "
"αντικείμενα μπορούν να χρησιμοποιηθούν για διάφορες λειτουργίες που "
"διαχειρίζονται δυαδικά δεδομένα' αυτά περιλαμβάνουν συμπίεση αποθήκευση σε "
"δυαδικό αρχείο και αποστολή μέσω socket."

#: glossary.rst:210
msgid ""
"Some operations need the binary data to be mutable.  The documentation often "
"refers to these as \"read-write bytes-like objects\".  Example mutable "
"buffer objects include :class:`bytearray` and a :class:`memoryview` of a :"
"class:`bytearray`. Other operations require the binary data to be stored in "
"immutable objects (\"read-only bytes-like objects\"); examples of these "
"include :class:`bytes` and a :class:`memoryview` of a :class:`bytes` object."
msgstr ""
"Ορισμένες λειτουργίες χρειάζονται τα δυαδικά δεδομένα να είναι μεταβλητά.  Η "
"τεκμηρίωση συχνά αναφέρεται σε αυτά ως \"δυαδικά αντικείμενα ανάγνωσης-"
"εγγραφής\" (read-write bytes-like objects). Παραδείγματα μεταβλητών "
"αντικειμένων προσωρινής αποθήκευσης περιέχουν :class:`bytearray` και ένα :"
"class:`memoryview` ενός :class:`bytearray`. Άλλες λειτουργίες απαιτούν την "
"αποθήκευσης των δυαδικών δεδομένα σε αμετάβλητα αντικείμενα (\"δυαδικά "
"αντικείμενα μόνο ανάγνωσης\"' (read-only bytes-like objects) παραδείγματα "
"αυτών περιέχουν :class:`bytes` και ένα :class:`memoryview` ενός :class:"
"`bytes` αντικειμένου."

#: glossary.rst:218
msgid "bytecode"
msgstr "bytecode"

#: glossary.rst:220
msgid ""
"Python source code is compiled into bytecode, the internal representation of "
"a Python program in the CPython interpreter.  The bytecode is also cached in "
"``.pyc`` files so that executing the same file is faster the second time "
"(recompilation from source to bytecode can be avoided).  This \"intermediate "
"language\" is said to run on a :term:`virtual machine` that executes the "
"machine code corresponding to each bytecode. Do note that bytecodes are not "
"expected to work between different Python virtual machines, nor to be stable "
"between Python releases."
msgstr ""
"Ο πηγαίος κώδικα της Python μεταγλωττίζεται σε *bytecode*, η εσωτερική "
"αναπαράσταση ενός προγράμματος Python στον διερμηνέα CPython. Το *bytecode* "
"αποθηκεύεται επίσης προσωρινά ως ``.pyc`` αρχεία ώστε η εκτέλεση του ίδιου "
"αρχείου να είναι γρηγορότερη την δεύτερη φορά εκτέλεσης (μπορεί να "
"αποφευχθεί η εκ νέου μεταγλώττιση από τον πηγαίο κώδικα σε *bytcode*). Αυτή "
"η \"ενδιάμεση γλώσσα\" λέγεται ότι τρέχει σε μια :term:`virtual machine` που "
"εκτελεί τον κώδικα μηχανής που αντιστοιχεί σε κάθε *bytecode*. Λάβετε υπόψη "
"ότι τα *bytecode* δεν αναμένεται να λειτουργούν μεταξύ διαφορετικών "
"εικονικών μηχανών Python, ούτε να είναι σταθερά μεταξύ των εκδόσεων της "
"Python."

#: glossary.rst:230
msgid ""
"A list of bytecode instructions can be found in the documentation for :ref:"
"`the dis module <bytecodes>`."
msgstr ""
"Μια λίστα από οδηγίες σχετικά με τα bytecode μπορεί να βρεθεί στην "
"τεκμηρίωση για :ref:`το module dis <bytecodes>`."

#: glossary.rst:232
msgid "callable"
msgstr "callable"

#: glossary.rst:234
msgid ""
"A callable is an object that can be called, possibly with a set of arguments "
"(see :term:`argument`), with the following syntax::"
msgstr ""
"Ένα callable είναι ένα αντικείμενο που μπορεί να καλεστεί, πιθανά με ένα "
"σύνολο ορισμάτων (βλ. :term:`argument`), με την παρακάτω σύνταξη::"

#: glossary.rst:237
msgid "callable(argument1, argument2, argumentN)"
msgstr "callable(argument1, argument2, argumentN)"

#: glossary.rst:239
msgid ""
"A :term:`function`, and by extension a :term:`method`, is a callable. An "
"instance of a class that implements the :meth:`~object.__call__` method is "
"also a callable."
msgstr ""
"Μια :term:`function`, και κατ' επέκταση μια :term:`method` είναι callable. "
"Ένα στιγμιότυπο μια κλάσης που υλοποιεί τη μέθοδο :meth:`~object.__call__` "
"είναι επίσης callable."

#: glossary.rst:242
msgid "callback"
msgstr "callback"

#: glossary.rst:244
msgid ""
"A subroutine function which is passed as an argument to be executed at some "
"point in the future."
msgstr ""
"Μια subroutine συνάρτηση η οποία μεταβιβάζεται ως όρισμα που θα εκτελεστεί "
"κάποια στιγμή στο μέλλον."

#: glossary.rst:246
msgid "class"
msgstr "κλάση"

#: glossary.rst:248
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
"Ένα πρότυπο για τη δημιουργία αντικειμένων που ορίζονται από το χρήστη. Οι "
"ορισμοί κλάσεων συνήθως περιέχουν ορισμούς μεθόδων που λειτουργούν σε "
"στιγμιότυπα της κλάσης."

#: glossary.rst:251
msgid "class variable"
msgstr "μεταβλητή κλάσης"

#: glossary.rst:253
msgid ""
"A variable defined in a class and intended to be modified only at class "
"level (i.e., not in an instance of the class)."
msgstr ""
"Μια μεταβλητή που ορίζεται σε μια κλάση και προορίζεται να τροποποιηθεί μόνο "
"σε επίπεδο κλάσης (δηλ. όχι σε ένα στιγμιότυπο μιας κλάσης)."

#: glossary.rst:255
msgid "closure variable"
msgstr "μεταβλητή κλεισίματος"

#: glossary.rst:257
msgid ""
"A :term:`free variable` referenced from a :term:`nested scope` that is "
"defined in an outer scope rather than being resolved at runtime from the "
"globals or builtin namespaces. May be explicitly defined with the :keyword:"
"`nonlocal` keyword to allow write access, or implicitly defined if the "
"variable is only being read."
msgstr ""
"Ένας :term:`free variable` που αναφέρεται από ένα :term:`nested scope` και "
"ορίζεται σε μια εξωτερική περιοχή, αντί να επιλύεται δυναμικά κατά την "
"εκτέλεση από τα καθολικά ή ενσωματωμένα namespaces. Μπορεί να δηλωθεί ρητά "
"με τη δεσμευμένη λέξη-κλειδί :keyword:`nonlocal` ώστε να επιτραπεί η "
"εγγραφή, ή να θεωρηθεί ότι ορίζεται έμμεσα όταν η μεταβλητή χρησιμοποιείται "
"μόνο για ανάγνωση."

#: glossary.rst:262
msgid ""
"For example, in the ``inner`` function in the following code, both ``x`` and "
"``print`` are :term:`free variables <free variable>`, but only ``x`` is a "
"*closure variable*::"
msgstr ""
"Για παράδειγμα, η συνάρτηση ``inner`` του παρακάτω κώδικα, τόσο η ``x`` όσο "
"και η ``print`` είναι :term:`free variables <free variable>`, αλλά μόνο η "
"``x`` είναι μια *μεταβλητή κλεισίματος*::"

#: glossary.rst:265
msgid ""
"def outer():\n"
"    x = 0\n"
"    def inner():\n"
"        nonlocal x\n"
"        x += 1\n"
"        print(x)\n"
"    return inner"
msgstr ""
"def outer():\n"
"    x = 0\n"
"    def inner():\n"
"        nonlocal x\n"
"        x += 1\n"
"        print(x)\n"
"    return inner"

#: glossary.rst:273
msgid ""
"Due to the :attr:`codeobject.co_freevars` attribute (which, despite its "
"name, only includes the names of closure variables rather than listing all "
"referenced free variables), the more general :term:`free variable` term is "
"sometimes used even when the intended meaning is to refer specifically to "
"closure variables."
msgstr ""
"Λόγο του χαρακτηριστικού :attr:`codeobject.co_freevars` (το οποίο, παρά την "
"ονομασία του, περιλαμβάνει μόνο τα ονόματα των μεταβλητών κλεισίματος και "
"όχι όλες τις αναφερόμενες ελεύθερες μεταβλητές), χρησιμοποιείται μερικές "
"φορές ο πιο γενικός όρος :term:`free variable` ακόμη και όταν γίνεται ειδική "
"αναφορά σε μεταβλητές κλεισίματος."

#: glossary.rst:277
msgid "complex number"
msgstr "μιγαδικός αριθμός"

#: glossary.rst:279
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're "
"not aware of a need for them, it's almost certain you can safely ignore them."
msgstr ""
"Μια επέκταση του γνωστού συστήματος πραγματικών αριθμών στο οποίο όλοι οι "
"αριθμοί εκφράζονται ως άθροισμα ενός πραγματικού μέρους και ενός φανταστικού "
"μέρους. Οι φανταστικοί αριθμοί είναι πραγματικά πολλαπλάσια της φανταστικής "
"μονάδα (η τετραγωνική ρίζα του ``-1``), που συχνά γράφονται ``i`` στα "
"μαθηματικά ή ``j`` στη μηχανική. Η Python έχει ενσωματωμένη υποστήριξη για "
"μιγαδικούς αριθμούς, οι οποίοι γράφονται με αυτόν τον τελευταίο συμβολισμό' "
"το φανταστικό μέρος γράφεται με το επίθημα ``j``, π.χ., ``3+1j``. Για να "
"αποκτήσετε πρόσβαση σε σύνθετα ισοδύναμα το module :mod:`math`, "
"χρησιμοποιήστε το :mod:`cmath`. Η χρήση μιγαδικών αριθμών είναι ένα αρκετά "
"προηγμένο μαθηματικό χαρακτηριστικό. εάν δεν γνωρίζετε την ανάγκη τους, "
"είναι σχεδόν σίγουρο ότι μπορείτε να τα αγνοήσετε με ασφάλεια."

#: glossary.rst:289
msgid "context"
msgstr "context"

#: glossary.rst:291
msgid ""
"This term has different meanings depending on where and how it is used. Some "
"common meanings:"
msgstr ""
"Αυτό ο όρος έχει διαφορετικές σημασίες ανάλογα με το πού και πώς "
"χρησιμοποιείται. Μερικές κοινές έννοιες:"

#: glossary.rst:294
msgid ""
"The temporary state or environment established by a :term:`context manager` "
"via a :keyword:`with` statement."
msgstr ""
"Η προσωρινή κατάσταση ή το περιβάλλον που δημιουργείται από έναν :term:"
"`context manager` μέσω μιας δήλωσης :keyword:`with`."

#: glossary.rst:296
msgid ""
"The collection of key­value bindings associated with a particular :class:"
"`contextvars.Context` object and accessed via :class:`~contextvars."
"ContextVar` objects.  Also see :term:`context variable`."
msgstr ""
"Το σύνολο των δεσμευμένων κλειδιού-τιμής που σχετίζονται με ένα συγκεκριμένο "
"αντικείμενο :class:`contextvars.Context` και προσπελάζονται μέσω "
"αντικειμένων :class:`~contextvars.ContextVar`.  Βλ. επίσης :term:`context "
"variable`."

#: glossary.rst:300
msgid ""
"A :class:`contextvars.Context` object.  Also see :term:`current context`."
msgstr ""
"Ένα αντικείμενο :class:`contextvars.Context`.  Βλ. επίσης :term:`current "
"context`."

#: glossary.rst:302
msgid "context management protocol"
msgstr "πρωτόκολλο διαχείρισης περιβάλλοντος"

#: glossary.rst:304
msgid ""
"The :meth:`~object.__enter__` and :meth:`~object.__exit__` methods called by "
"the :keyword:`with` statement.  See :pep:`343`."
msgstr ""
"Οι μέθοδοι :meth:`~object.__enter__` και :meth:`~object.__exit__`  καλούνται "
"από τη δήλωση :keyword:`with`.  Βλ. :pep:`343`."

#: glossary.rst:306
msgid "context manager"
msgstr "διαχειριστής context"

#: glossary.rst:308
msgid ""
"An object which implements the :term:`context management protocol` and "
"controls the environment seen in a :keyword:`with` statement.  See :pep:"
"`343`."
msgstr ""
"Ένα αντικείμενο που υλοποιεί το :term:`context management protocol` και "
"ελέγχει το περιβάλλον που είσαι ορατό μέσα σε μια δήλωση :keyword:`with`.  "
"Βλ. :pep:`343`."

#: glossary.rst:311
msgid "context variable"
msgstr "context μεταβλητή"

#: glossary.rst:313
msgid ""
"A variable whose value depends on which context is the :term:`current "
"context`.  Values are accessed via :class:`contextvars.ContextVar` objects.  "
"Context variables are primarily used to isolate state between concurrent "
"asynchronous tasks."
msgstr ""
"Μια μεταβλητή της οποίας η τιμή εξαρτάται από το ποιο είναι το :term:"
"`current context`.  Οι τιμές προσπελάζονται μέσω των αντικειμένων :class:"
"`contextvars.ContextVar`.  Οι μεταβλητές συμφραζόμενων χρησιμοποιούνται "
"κυρίως για να απομονώσουν την κατάσταση μεταξύ ταυτόχρονων ασύγχρονων "
"εργασιών."

#: glossary.rst:317
msgid "contiguous"
msgstr "contiguous"

#: glossary.rst:321
msgid ""
"A buffer is considered contiguous exactly if it is either *C-contiguous* or "
"*Fortran contiguous*.  Zero-dimensional buffers are C and Fortran "
"contiguous.  In one-dimensional arrays, the items must be laid out in memory "
"next to each other, in order of increasing indexes starting from zero.  In "
"multidimensional C-contiguous arrays, the last index varies the fastest when "
"visiting items in order of memory address.  However, in Fortran contiguous "
"arrays, the first index varies the fastest."
msgstr ""
"Ένα buffer θεωρείται contiguous ακριβώς εάν είναι είτε *C-contiguous* είτε "
"*Fortran contriguous*. Το buffer μηδενικών διαστάσεων είναι C και Fortran "
"contiguous. Σε μονοδιάστατους πίνακες, τα στοιχεία πρέπει να τοποθετούνται "
"στη μνήμη το ένα δίπλα στο άλλο, με σειρά αύξησης των δεικτών ξεκινώντας από "
"το μηδέν. Σε πολυδιάστατους C-contiguous πίνακες, ο τελευταίος δείκτης "
"μεταβάλλεται ταχύτερα όταν επισκέπτονται τα στοιχεία σε σειρά διεύθυνσης "
"μνήμης. Ωστόσο, σε Fortran contiguous πίνακες, ο πρώτος δείκτης μεταβάλλεται "
"πιο γρήγορα."

#: glossary.rst:329
msgid "coroutine"
msgstr "coroutine"

#: glossary.rst:331
msgid ""
"Coroutines are a more generalized form of subroutines. Subroutines are "
"entered at one point and exited at another point.  Coroutines can be "
"entered, exited, and resumed at many different points.  They can be "
"implemented with the :keyword:`async def` statement.  See also :pep:`492`."
msgstr ""
"Οι coroutines είναι μια πιο γενικευμένη μορφή subroutines. Οι subroutines "
"εισάγονται σε ένα σημείο και εξάγονται σε άλλο σημείο. Οι coroutines μπορεί "
"να εισαχθούν, να εξαχθούν και να συνεχιστούν σε πολλά διαφορετικά σημεία. "
"Μπορούν να υλοποιήσουν με την δήλωση :keyword:`async def`. Βλ. επίσης :pep:"
"`492`."

#: glossary.rst:336
msgid "coroutine function"
msgstr "coroutine συνάρτηση"

#: glossary.rst:338
msgid ""
"A function which returns a :term:`coroutine` object.  A coroutine function "
"may be defined with the :keyword:`async def` statement, and may contain :"
"keyword:`await`, :keyword:`async for`, and :keyword:`async with` keywords.  "
"These were introduced by :pep:`492`."
msgstr ""
"Μια συνάρτηση που επιστρέφει ένα :term:`coroutine` αντικείμενο.  Μια "
"συνάρτηση coroutine μπορεί να ορίζεται από τη δήλωση :keyword:`async def`, "
"και μπορεί να περιέχει :keyword:`await`, :keyword:`async for`, και :keyword:"
"`async with` λέξεις κλειδιά. Αυτές εισήχθησαν από το :pep:`492`."

#: glossary.rst:343
msgid "CPython"
msgstr "CPython"

#: glossary.rst:345
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\" "
"is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
"Η κανονική υλοποίηση της γλώσσας προγραμματισμού Python, όπως διανέμεται στο "
"`python.org <https://www.python.org>`_. Ο όρος \"CPython\" χρησιμοποιείται "
"όταν είναι απαραίτητο για την διάκριση αυτής της υλοποίησης από άλλες όπως η "
"*Jython* ή η *IronPython*."

#: glossary.rst:349
msgid "current context"
msgstr "τρέχον πλαίσιο"

#: glossary.rst:351
msgid ""
"The :term:`context` (:class:`contextvars.Context` object) that is currently "
"used by :class:`~contextvars.ContextVar` objects to access (get or set) the "
"values of :term:`context variables <context variable>`.  Each thread has its "
"own current context.  Frameworks for executing asynchronous tasks (see :mod:"
"`asyncio`) associate each task with a context which becomes the current "
"context whenever the task starts or resumes execution."
msgstr ""
"Το :term:`context` (:class:`contextvars.Context` αντικείμενο) που "
"χρησιμοποιείται αυτή τη στιγμή από τα αντικείμενα :class:`~contextvars."
"ContextVar` για να προσπελάσει (να πάρει ή να ορίσει) τις τιμές των :term:"
"`context variables <context variable>`.  Κάθε νήμα έχει το δικό του τρέχον "
"συμφραζόμενο Τα πλαίσια για την εκτέλεση ασύγχρονων εργασιών (βλ. :mod:"
"`asyncio`) συνδέουν κάθε εργασία με ένα συμφραζόμενο, το οποίο γίνεται το "
"τρέχον συμφραζόμενο όποτε η εργασία ξεκινά ή συνεχίζει την εκτέλεση."

#: glossary.rst:357
msgid "decorator"
msgstr "decorator"

#: glossary.rst:359
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Μια συνάρτηση που επιστρέφει μια άλλη συνάρτηση, συνήθως εφαρμόζεται ως "
"μετασχηματισμός συνάρτησης χρησιμοποιώντας την ``@wrapper`` σύνταξη. "
"Συνηθισμένα παραδείγματα για τους decorators είναι :func:`classmethod` και :"
"func:`staticmethod`."

#: glossary.rst:363
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"Η σύνταξη του decorator είναι απλώς καλλωπιστική, οι ακόλουθοι δύο ορισμοί "
"συναρτήσεων είναι σημασιολογικά ισοδύναμοι::"

#: glossary.rst:366
msgid ""
"def f(arg):\n"
"    ...\n"
"f = staticmethod(f)\n"
"\n"
"@staticmethod\n"
"def f(arg):\n"
"    ..."
msgstr ""
"def f(arg):\n"
"    ...\n"
"f = staticmethod(f)\n"
"\n"
"@staticmethod\n"
"def f(arg):\n"
"    ..."

#: glossary.rst:374
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class "
"definitions <class>` for more about decorators."
msgstr ""
"Η ίδια έννοια υπάρχει για τις κλάσεις, αλλά χρησιμοποιείται λιγότερο συχνά "
"εκεί. Βλ. την τεκμηρίωση για :ref:`function definitions <function>` και :ref:"
"`class definitions <class>` για περισσότερα σχετικά με τους decorators."

#: glossary.rst:377
msgid "descriptor"
msgstr "descriptor"

#: glossary.rst:379
msgid ""
"Any object which defines the methods :meth:`~object.__get__`, :meth:`~object."
"__set__`, or :meth:`~object.__delete__`. When a class attribute is a "
"descriptor, its special binding behavior is triggered upon attribute "
"lookup.  Normally, using *a.b* to get, set or delete an attribute looks up "
"the object named *b* in the class dictionary for *a*, but if *b* is a "
"descriptor, the respective descriptor method gets called.  Understanding "
"descriptors is a key to a deep understanding of Python because they are the "
"basis for many features including functions, methods, properties, class "
"methods, static methods, and reference to super classes."
msgstr ""
"Κάθε αντικείμενο που ορίζει τις μεθόδους :meth:`~object.__get__`, :meth:"
"`~object.__set__`, ή :meth:`~object.__delete__`. Όταν ένα χαρακτηριστικό "
"κλάσης είναι descriptor, η ειδική δεσμευτική του συμπεριφορά ενεργοποιείται "
"κατά την αναζήτηση χαρακτηριστικών. Κανονικά, χρησιμοποιώντας *a.b* για να "
"λάβετε, να ορίσετε ή να διαγράψετε ένα χαρακτηριστικό αναζητά το αντικείμενο "
"με το όνομα *b* στο λεξικό της κλάσης για *a*, αλλά εάν το *b* είναι "
"descriptor, καλείται η αντίστοιχη μέθοδος descriptor. Η κατανόηση των "
"descriptors είναι το κλειδί για την καλύτερη κατανόηση της Python γιατί αυτό "
"αποτελεί την βάση για πολλά χαρακτηριστικά όπως συναρτήσεις, μεθόδους, "
"ιδιότητες, μέθοδοι κλάσης στατικές μέθοδοι, και αναφορά σε σούπερ κλάσεις."

#: glossary.rst:390
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors` or "
"the :ref:`Descriptor How To Guide <descriptorhowto>`."
msgstr ""
"Για περισσότερες πληροφορίες αναφορικά με τις μεθόδους των descriptors, βλ. "
"see :ref:`descriptors` ή το :ref:`Πρακτικός οδηγός για τη χρήση του "
"Descriptor <descriptorhowto>`."

#: glossary.rst:392
msgid "dictionary"
msgstr "λεξικό"

#: glossary.rst:394
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`~object.__hash__` and :meth:`~object.__eq__` "
"methods. Called a hash in Perl."
msgstr ""
"Ένα προσεταιριστικός πίνακα, όπου αυθαίρετα κλειδιά αντιστοιχίζονται σε "
"τιμές. Τα κλειδιά μπορεί να είναι οποιοδήποτε αντικείμενο με μεθόδους :meth:"
"`~object.__hash__` και :meth:`~object.__eq__`. Ονομάζεται ως hash στο Perl."

#: glossary.rst:398
msgid "dictionary comprehension"
msgstr "κατανόηση λεξικού"

#: glossary.rst:400
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a dictionary with the results. ``results = {n: n ** 2 for n in "
"range(10)}`` generates a dictionary containing key ``n`` mapped to value ``n "
"** 2``. See :ref:`comprehensions`."
msgstr ""
"Ένα συμπαγής τρόπος για να επεξεργαστείτε όλα ή μέρος των στοιχείων σε ένα "
"επαναληπτικό και να επιστραφεί ένα με λεξικό με τα αποτελέσματα. ``results = "
"{n: n ** 2 for n in range(10)}`` δημιουργεί ένα λεξικό που περιέχει το "
"κλειδί ``n`` που αντιστοιχίζεται με την τιμή ``n ** 2``. Βλ. :ref:"
"`comprehensions`."

#: glossary.rst:404
msgid "dictionary view"
msgstr "όψη λεξικού"

#: glossary.rst:406
msgid ""
"The objects returned from :meth:`dict.keys`, :meth:`dict.values`, and :meth:"
"`dict.items` are called dictionary views. They provide a dynamic view on the "
"dictionary’s entries, which means that when the dictionary changes, the view "
"reflects these changes. To force the dictionary view to become a full list "
"use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""
"Τα αντικείμενα που επιστρέφονται από :meth:`dict.keys`, :meth:`dict.values`, "
"και :meth:`dict.items` καλούνται όψεις λεξικού. Αυτές παρέχουν μια δυναμική "
"όψη των των εγγραφών του λεξικού, που σημαίνει ότι όταν το λεξικό "
"μεταβάλλεται, η όψη αντικατοπτρίζει αυτές τις αλλαγές. Για να αναγκάσετε την "
"όψη λεξικού να γίνει μια πλήρης λίστα χρησιμοποιήστε το ``list(dictview)``.  "
"Βλ. :ref:`dict-views`."

#: glossary.rst:412
msgid "docstring"
msgstr "docstring"

#: glossary.rst:414
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`~definition.__doc__` attribute of the "
"enclosing class, function or module.  Since it is available via "
"introspection, it is the canonical place for documentation of the object."
msgstr ""
"Μια literal συμβολοσειρά που εμφανίζεται ως η πρώτη έκφραση σε μια κλάση, "
"συνάρτηση ή module. Ενώ αγνοείται κατά την εκτέλεση της σουίτας, "
"αναγνωρίζεται από τον μεταγλωττιστή και τοποθετείται στο χαρακτηριστικό :"
"attr:`~definition.__doc__` της κλάσης, της συνάρτησης ή του module που "
"περικλείει.  Δεδομένου ότι είναι διαθέσιμο μέσω ενδοσκόπησης, το κανονικό "
"μέρος για την τεκμηρίωση του αντικειμένου."

#: glossary.rst:420
msgid "duck-typing"
msgstr "duck-typing"

#: glossary.rst:422
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be "
"a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic "
"substitution.  Duck-typing avoids tests using :func:`type` or :func:"
"`isinstance`.  (Note, however, that duck-typing can be complemented with :"
"term:`abstract base classes <abstract base class>`.)  Instead, it typically "
"employs :func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
"Ένα στυλ προγραμματισμού που δεν εξετάζει τον τύπο ενός αντικειμένου για να "
"προσδιορίσει αν έχει τη σωστή διεπαφή' αντίθετα, η μέθοδος ή το "
"χαρακτηριστικό καλείται απλώς ή χρησιμοποιείται (\"If it looks like a duck "
"and quacks like a duck, it must be a duck.\") Δίνοντας έμφαση στις διεπαφές "
"και όχι σε συγκεκριμένους τύπους, ο καλά σχεδιασμένος κώδικας βελτιώνει την "
"ευελιξία του επιτρέποντας την πολυμορφική υποκατάσταση. Ο τύπος duck-typing "
"αποφεύγει δοκιμές χρησιμοποιώντας :func:`type` ή :func:`isinstance`. "
"(Σημείωση, ωστόσο, ότι ο τύπος πάπιας *duck-typing* μπορεί να συμπληρωθεί "
"με :term:`abstract base classes <abstract base class>`.) Αντί αυτού, συνήθως "
"χρησιμοποιεί δοκιμές :func:`hasattr` ή προγραμματισμό :term:`EAFP`."

#: glossary.rst:431
msgid "EAFP"
msgstr "EAFP"

#: glossary.rst:433
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
"Πιο εύκολο να ζητήσεις συγχώρεση παρά άδεια.  Αυτό το κοινό στυλ "
"προγραμματισμού σε Python προϋποθέτει την ύπαρξη έγκυρων κλειδιών ή "
"χαρακτηριστικών και συλλαμβάνει εξαιρέσεις εάν η υπόθεση αποδεχθεί "
"εσφαλμένη. Αυτό το καθαρό και γρήγορο στυλ χαρακτηρίζεται από την παρουσία "
"πολλών δηλώσεων :keyword:`try` και :keyword:`except`. Η τεχνική έρχεται σε "
"αντίθεση με το στυλ που είναι :term:`LBYL` κοινό σε πολλές άλλες γλώσσες, "
"όπως η C."

#: glossary.rst:439
msgid "evaluate function"
msgstr "αξιολόγηση συνάρτησης"

#: glossary.rst:441
msgid ""
"A function that can be called to evaluate a lazily evaluated attribute of an "
"object, such as the value of type aliases created with the :keyword:`type` "
"statement."
msgstr ""
"Μια συνάρτηση που μπορεί να κληθεί για να αξιολογήσει ένα αδρανές "
"χαρακτηριστικό ενός αντικειμένου, όπως η τιμή των ψευδωνύμων τύπου που "
"δημιουργούνται με την πρόταση :keyword:`type`."

#: glossary.rst:444
msgid "expression"
msgstr "έκφραση"

#: glossary.rst:446
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`while`.  Assignments are also statements, not "
"expressions."
msgstr ""
"Ένα κομμάτι σύνταξης που μπορεί να αξιολογηθεί σε κάποια τιμή. Με άλλα "
"λόγια, μια έκφραση είναι μια συσσώρευση στοιχείων έκφρασης όπως κυριολεξία, "
"ονόματα, πρόσβαση χαρακτηριστικών, τελεστές ή κλήσεις συναρτήσεων που όλες "
"επιστρέφουν μια τιμή. Σε αντίθεση με πολλές άλλες γλώσσες, δεν είναι όλες οι "
"γλωσσικές δομές εκφράσεις. Υπάρχουνε επίσης :term:`statement`\\s που δεν "
"μπορούν να χρησιμοποιηθούν ως εκφράσεις, όπως το :keyword:`while`.  Οι "
"αναθέσεις τιμών είναι επίσης δηλώσεις όχι εκφράσεις."

#: glossary.rst:453
msgid "extension module"
msgstr "module επέκτασης"

#: glossary.rst:455
msgid ""
"A module written in C or C++, using Python's C API to interact with the core "
"and with user code."
msgstr ""
"Ένα module γραμμένο σε C ή C++, που χρησιμοποιείται από το C API της Python "
"για να αλληλεπιδράσουν με τον πυρήνα και με τον κώδικα του χρήστη."

#: glossary.rst:457
msgid "f-string"
msgstr "f-string"

#: glossary.rst:459
msgid ""
"String literals prefixed with ``'f'`` or ``'F'`` are commonly called \"f-"
"strings\" which is short for :ref:`formatted string literals <f-strings>`.  "
"See also :pep:`498`."
msgstr ""
"Οι κυριολεκτικές συμβολοσειρές χρησιμοποιούν με πρόθεμα ``'f'`` ή ``'F'`` "
"ονομάζονται συνήθως \"f-strings\" που είναι συντομογραφία του :ref:"
"`formatted string literals <f-strings>`. Βλ. επίσης :pep:`498`."

#: glossary.rst:462
msgid "file object"
msgstr "αντικείμενο αρχείου"

#: glossary.rst:464
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`!read` "
"or :meth:`!write`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard input/"
"output, in-memory buffers, sockets, pipes, etc.).  File objects are also "
"called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Ένα αντικείμενο που εκθέτει ένα API προσανατολισμένο σε αρχείο (με μεθόδους "
"όπως :meth:`!read` ή :meth:`!write`) σε έναν υποκείμενο πόρο. Ανάλογα με τον "
"τρόπο που δημιουργήθηκε, ένα αντικείμενο αρχείου μπορεί να μεσολαβήσει στην "
"πρόσβαση σε ένα πραγματικό αρχείο στο δίσκο ή σε άλλο τύπο συσκευής "
"αποθήκευσης ή επικοινωνίας (για παράδειγμα τυπική είσοδος/ έξοδος, in-memory "
"buffers, sockets, pipes, κλπ.). Αντικείμενο αρχείου ονομάζονται επίσης :dfn:"
"`file-like objects` ή :dfn:`streams`."

#: glossary.rst:472
msgid ""
"There are actually three categories of file objects: raw :term:`binary files "
"<binary file>`, buffered :term:`binary files <binary file>` and :term:`text "
"files <text file>`. Their interfaces are defined in the :mod:`io` module.  "
"The canonical way to create a file object is by using the :func:`open` "
"function."
msgstr ""
"Στην πραγματικότητα υπάρχουν τρεις κατηγορίες αντικειμένων αρχείου raw :term:"
"`δυαδικά αρχεία <binary file>`, buffered :term:`δυαδικά αρχεία <binary "
"file>` και :term:`αρχεία κειμένου <text file>`. Οι διεπαφές τους ορίζονται "
"στην ενότητα :mod:`io`. Ο κανονικός τρόπος για να δημιουργήσετε ένα "
"αντικείμενο αρχείου είναι χρησιμοποιώντας την συνάρτηση :func:`open`."

#: glossary.rst:477
msgid "file-like object"
msgstr "αντικείμενο που μοιάζει με αρχείο"

#: glossary.rst:479
msgid "A synonym for :term:`file object`."
msgstr "Ένα συνώνυμο με το :term:`file object`."

#: glossary.rst:480
msgid "filesystem encoding and error handler"
msgstr "κωδικοποίηση συστήματος αρχείων και χειριστής σφαλμάτων"

#: glossary.rst:482
msgid ""
"Encoding and error handler used by Python to decode bytes from the operating "
"system and encode Unicode to the operating system."
msgstr ""
"Η κωδικοποίηση και ο χειριστής σφαλμάτων χρησιμοποιείται από την Python για "
"την αποκωδικοποίηση των bytes από το λειτουργικό σύστημα και την "
"κωδικοποίηση σε Unicode για το λειτουργικό σύστημα."

#: glossary.rst:485
msgid ""
"The filesystem encoding must guarantee to successfully decode all bytes "
"below 128. If the file system encoding fails to provide this guarantee, API "
"functions can raise :exc:`UnicodeError`."
msgstr ""
"Η κωδικοποίηση συστήματος αρχείων μπορεί να εγγυηθεί την επιτυχημένη "
"αποκωδικοποίηση όλων των bytes κάτω από 128. Εάν η κωδικοποίηση συστήματος "
"αρχείων δεν παρέχει αυτήν την εγγύηση, οι συναρτήσεις API μπορούν να "
"εγείρουν ένα :exc:`UnicodeError`."

#: glossary.rst:489
msgid ""
"The :func:`sys.getfilesystemencoding` and :func:`sys."
"getfilesystemencodeerrors` functions can be used to get the filesystem "
"encoding and error handler."
msgstr ""
"Οι συναρτήσεις :func:`sys.getfilesystemencoding` και :func:`sys."
"getfilesystemencodeerrors` μπορούν να χρησιμοποιηθούν για να λάβετε την "
"κωδικοποίηση του συστήματος αρχείων και του χειριστή σφαλμάτων."

#: glossary.rst:493
msgid ""
"The :term:`filesystem encoding and error handler` are configured at Python "
"startup by the :c:func:`PyConfig_Read` function: see :c:member:`~PyConfig."
"filesystem_encoding` and :c:member:`~PyConfig.filesystem_errors` members of :"
"c:type:`PyConfig`."
msgstr ""
"Ο :term:`filesystem encoding and error handler` διαμορφώνονται κατά την "
"εκκίνηση της Python από τη συνάρτηση :c:func:`PyConfig_Read` βλ. :c:member:"
"`~PyConfig.filesystem_encoding` και :c:member:`~PyConfig.filesystem_errors` "
"μέλη του :c:type:`PyConfig`."

#: glossary.rst:498
msgid "See also the :term:`locale encoding`."
msgstr "Βλ. επίσης το :term:`locale encoding`."

#: glossary.rst:499
msgid "finder"
msgstr "finder"

#: glossary.rst:501
msgid ""
"An object that tries to find the :term:`loader` for a module that is being "
"imported."
msgstr ""
"Ένα αντικείμενο που προσπαθεί να βρει το :term:`loader` για ένα module που "
"εισήχθη."

#: glossary.rst:504
msgid ""
"There are two types of finder: :term:`meta path finders <meta path finder>` "
"for use with :data:`sys.meta_path`, and :term:`path entry finders <path "
"entry finder>` for use with :data:`sys.path_hooks`."
msgstr ""
"Υπάρχουν δύο τύποι finder: :term:`finders μετα διαδρομής <meta path finder>` "
"για χρήση με :data:`sys.meta_path`, και :term:`finders εισόδου διαδρομής "
"<path entry finder>` για χρήση με :data:`sys.path_hooks`."

#: glossary.rst:508
msgid ""
"See :ref:`finders-and-loaders` and :mod:`importlib` for much more detail."
msgstr ""
"Βλ. :ref:`finders-and-loaders` και :mod:`importlib` για περισσότερες "
"λεπτομέρειες."

#: glossary.rst:509
msgid "floor division"
msgstr "ακέραια διαίρεση"

#: glossary.rst:511
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
"Η μαθηματική διαίρεση που στρογγυλοποιεί προς τα κάτω στον κοντινότερο "
"ακέραιο. Ο τελεστής ακέραιας διαίρεσης είναι ``//``. Για παράδειγμα, η "
"έκφραση ``11 // 4`` αξιολογείται σε ``2`` σε αντίθεση με την τιμή ``2.75`` "
"που επιστρέφεται από την διαίρεση με υποδιαστολή. Σημείωση ότι ``(-11) // "
"4`` κάνει ``-3`` επειδή αυτή είναι η στρογγυλοποίηση *προς τα κάτω* του "
"``-2.75``. Βλ. :pep:`238`."

#: glossary.rst:516
msgid "free threading"
msgstr "δωρεάν νήμα"

#: glossary.rst:518
msgid ""
"A threading model where multiple threads can run Python bytecode "
"simultaneously within the same interpreter.  This is in contrast to the :"
"term:`global interpreter lock` which allows only one thread to execute "
"Python bytecode at a time.  See :pep:`703`."
msgstr ""
"Ένα μοντέλο νημάτων όπου πολλά νήματα μπορούν να εκτελούν Python bytecode "
"ταυτόχρονα μέσα στον ίδιο διερμηνέα.  Αυτό έρχεται σε αντίθεση με το :term:"
"`global interpreter lock`, το οποίο επιτρέπει σε ένα μόνο νήμα να εκτελεί "
"Python bytecode κάθε φορά.  Δείτε το :pep:`703`."

#: glossary.rst:522
msgid "free variable"
msgstr "δωρεάν μεταβλητή"

#: glossary.rst:524
msgid ""
"Formally, as defined in the :ref:`language execution model <bind_names>`, a "
"free variable is any variable used in a namespace which is not a local "
"variable in that namespace. See :term:`closure variable` for an example. "
"Pragmatically, due to the name of the :attr:`codeobject.co_freevars` "
"attribute, the term is also sometimes used as a synonym for :term:`closure "
"variable`."
msgstr ""
"Τυπικά, όπως ορίζεται στο :ref:`language execution model <bind_names>`, μια "
"ελεύθερη μεταβλητή είναι οποιαδήποτε μεταβλητή χρησιμοποιείται σε ένα "
"namespace που δεν είναι τοπική μεταβλητή σε εκείνο το namespace. Δείτε το :"
"term:`closure variable` για παράδειγμα. Πρακτικά, λόγω του ονόματος του "
"χαρακτηριστικού :attr:`codeobject.co_freevars`, ο όρος χρησιμοποιείται "
"επίσης μερικές φορές ως συνώνυμο της :term:`closure variable`."

#: glossary.rst:529
msgid "function"
msgstr "συνάρτηση"

#: glossary.rst:531
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the :"
"ref:`function` section."
msgstr ""
"Μια σειρά από δηλώσεις που επιστρέφουν κάποια τιμή σε αυτόν που την κάλεσε. "
"Σε αυτές μπορούν να περαστούν κανένα ή περισσότερα :term:`ορίσματα "
"<argument>` που μπορεί να χρησιμοποιηθεί για την εκτέλεση. Βλ. επίσης τις "
"ενότητες :term:`parameter`, :term:`method`, και the :ref:`function`."

#: glossary.rst:535
msgid "function annotation"
msgstr "συνάρτηση annotation"

#: glossary.rst:537
msgid "An :term:`annotation` of a function parameter or return value."
msgstr ""
"Ένας :term:`annotation` μιας παραμέτρου συνάρτησης ή μιας τιμής επιστροφής."

#: glossary.rst:539
msgid ""
"Function annotations are usually used for :term:`type hints <type hint>`: "
"for example, this function is expected to take two :class:`int` arguments "
"and is also expected to have an :class:`int` return value::"
msgstr ""
"Οι συναρτήσεις annotations συχνά χρησιμοποιούνται για :term:`υποδείξεις "
"τύπου <type hint>`: για παράδειγμα, αυτή η συνάρτηση αναμένεται να πάρει δύο "
"ορίσματα :class:`int` και επίσης αναμένεται να έχει μία επιστρεφόμενη τιμή :"
"class:`int`::"

#: glossary.rst:544
msgid ""
"def sum_two_numbers(a: int, b: int) -> int:\n"
"   return a + b"
msgstr ""
"def sum_two_numbers(a: int, b: int) -> int:\n"
"   return a + b"

#: glossary.rst:547
msgid "Function annotation syntax is explained in section :ref:`function`."
msgstr ""
"Η σύνταξη συνάρτησης annotation αναλύεται στην ενότητα :ref:`function`."

#: glossary.rst:549
msgid ""
"See :term:`variable annotation` and :pep:`484`, which describe this "
"functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Βλ. :term:`variable annotation` και :pep:`484`, που περιγράφει αυτή την "
"λειτουργικότητα. Επίσης βλ. :ref:`annotations-howto` για τις καλύτερες "
"πρακτικές δουλεύοντας με annotations."

#: glossary.rst:553
msgid "__future__"
msgstr "__future__"

#: glossary.rst:555
msgid ""
"A :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"directs the compiler to compile the current module using syntax or semantics "
"that will become standard in a future release of Python. The :mod:"
"`__future__` module documents the possible values of *feature*.  By "
"importing this module and evaluating its variables, you can see when a new "
"feature was first added to the language and when it will (or did) become the "
"default::"
msgstr ""
"Ένα :ref:`future statement <future>`, ``from __future__ import <feature>``, "
"καθοδηγεί τον μεταγλωττιστή να μεταγλωττίσει το τρέχον module "
"χρησιμοποιώντας σύνταξη ή σημασιολογία που θα γίνει η τυπική σε μελλοντική "
"έκδοση της Python. Το module :mod:`__future__` τεκμηριώνει τις πιθανές τιμές "
"του *feature*. Με την εισαγωγή αυτής της λειτουργικής μονάδας και την "
"αξιολόγηση των μεταβλητών της, μπορείτε να δείτε πότε μια νέα δυνατότητα "
"προστέθηκε για πρώτη φορά στην γλώσσα και πότε θα γίνει (ή έγινε) η "
"προεπιλογή::"

#: glossary.rst:563
msgid ""
">>> import __future__\n"
">>> __future__.division\n"
"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"
msgstr ""
">>> import __future__\n"
">>> __future__.division\n"
"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"

#: glossary.rst:566
msgid "garbage collection"
msgstr "συλλογή απορριμάτων"

#: glossary.rst:568
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles.  The garbage collector "
"can be controlled using the :mod:`gc` module."
msgstr ""
"Η διαδικασία απελευθέρωσης της μνήμης όταν δεν χρησιμοποιείται άλλο.  Η "
"Python εκτελεί συλλογή απορριμάτων μέσω καταμέτρησης αναφορών και ενός "
"κυκλικού συλλέκτη σκουπιδιών που είναι σε θέση να ανιχνεύει και να σπάει "
"τους κύκλους αναφοράς. Ο συλλέκτης απορριμάτων μπορεί να ελεγχθεί "
"χρησιμοποιώντας το module :mod:`gc`."

#: glossary.rst:574
msgid "generator"
msgstr "generator"

#: glossary.rst:576
msgid ""
"A function which returns a :term:`generator iterator`.  It looks like a "
"normal function except that it contains :keyword:`yield` expressions for "
"producing a series of values usable in a for-loop or that can be retrieved "
"one at a time with the :func:`next` function."
msgstr ""
"Μια συνάρτηση που επιστρέφει ένα :term:`generator iterator`.  Μοιάζει με μια "
"κανονική συνάρτηση εκτός από το ότι περιέχει εκφράσεις :keyword:`yield` για "
"την παραγωγή μιας σειράς τιμών που μπορούν να χρησιμοποιηθούν σε έναν βρόχο "
"*for* ή που μπορούν να ανακτηθούν μία τη φορά με την συνάρτηση :func:`next` "
"function."

#: glossary.rst:581
msgid ""
"Usually refers to a generator function, but may refer to a *generator "
"iterator* in some contexts.  In cases where the intended meaning isn't "
"clear, using the full terms avoids ambiguity."
msgstr ""
"Συνήθως αναφέρεται σε μια συνάρτηση generator, αλλά μπορεί να αναφέρεται σε "
"έναν  *generator iterator* σε μερικά contexts. Σε περιπτώσεις όπου το "
"επιδιωκόμενο νόημα δεν είναι σαφές, η χρήση των πλήρων όρων αποφεύγει την "
"ασάφεια."

#: glossary.rst:584
msgid "generator iterator"
msgstr "generator iterator"

#: glossary.rst:586
msgid "An object created by a :term:`generator` function."
msgstr "Ένα αντικείμενο που δημιουργείται από μια συνάρτηση :term:`generator`."

#: glossary.rst:588
msgid ""
"Each :keyword:`yield` temporarily suspends processing, remembering the "
"execution state (including local variables and pending try-statements).  "
"When the *generator iterator* resumes, it picks up where it left off (in "
"contrast to functions which start fresh on every invocation)."
msgstr ""
"Κάθε :keyword:`yield` αναστέλλει προσωρινά την επεξεργασία, θυμάται την "
"κατάσταση εκτέλεσης (συμπεριλαμβανομένων των τοπικών μεταβλητών και των "
"δηλώσεων δοκιμής σε εκκρεμότητα). Όταν ο *generator iterator* συνεχίσει, "
"συνεχίζει από εκεί που σταμάτησε (σε αντίθεση με τις συναρτήσεις που "
"ξεκινούν από την αρχή σε κάθε επίκληση)."

#: glossary.rst:595
msgid "generator expression"
msgstr "generator έκφραση"

#: glossary.rst:597
msgid ""
"An :term:`expression` that returns an :term:`iterator`.  It looks like a "
"normal expression followed by a :keyword:`!for` clause defining a loop "
"variable, range, and an optional :keyword:`!if` clause.  The combined "
"expression generates values for an enclosing function::"
msgstr ""
"Μια :term:`expression` που επιστρέφει έναν :term:`iterator`.  Μοιάζει με "
"κανονική έκφραση που ακολουθείται από μια πρόταση :keyword:`!for` που ορίζει "
"μια μεταβλητή βρόχου, ένα εύρος και μια προαιρετική πρόταση :keyword:`!if`. "
"Η συνδυασμένη έκφραση δημιουργεί τιμές για μια συνάρτηση εγκλεισμού::"

#: glossary.rst:602
msgid ""
">>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81\n"
"285"
msgstr ""
">>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81\n"
"285"

#: glossary.rst:604
msgid "generic function"
msgstr "γενική συνάρτηση"

#: glossary.rst:606
msgid ""
"A function composed of multiple functions implementing the same operation "
"for different types. Which implementation should be used during a call is "
"determined by the dispatch algorithm."
msgstr ""
"Μια συνάρτηση που αποτελείται από πολλαπλές συναρτήσεις που υλοποιούν την "
"ίδια λειτουργία για διαφορετικούς τύπους. Ποια υλοποίηση πρέπει να "
"χρησιμοποιηθεί κατά τη διάρκεια μια κλήσης καθορίζεται από τον αλγόριθμο "
"αποστολής."

#: glossary.rst:610
msgid ""
"See also the :term:`single dispatch` glossary entry, the :func:`functools."
"singledispatch` decorator, and :pep:`443`."
msgstr ""
"Βλ. επίσης την καταχώρηση του :term:`single dispatch`, τον decorator :func:"
"`functools.singledispatch` και :pep:`443`."

#: glossary.rst:612
msgid "generic type"
msgstr "γενικός τύπος"

#: glossary.rst:614
msgid ""
"A :term:`type` that can be parameterized; typically a :ref:`container "
"class<sequence-types>` such as :class:`list` or :class:`dict`. Used for :"
"term:`type hints <type hint>` and :term:`annotations <annotation>`."
msgstr ""
"Ένας :term:`type` που μπορεί να παραμετροποιηθεί' συνήθως μια :ref:"
"`container class<sequence-types>`, όπως :class:`list` ή :class:`dict`. "
"Χρησιμοποιείται για :term:`type hints <type hint>` και :term:`annotations "
"<annotation>`."

#: glossary.rst:619
msgid ""
"For more details, see :ref:`generic alias types<types-genericalias>`, :pep:"
"`483`, :pep:`484`, :pep:`585`, and the :mod:`typing` module."
msgstr ""
"Για περισσότερες λεπτομέρειες, βλ. :ref:`generic alias types<types-"
"genericalias>` :pep:`483`, :pep:`484`, :pep:`585`, και το module :mod:"
"`typing`."

#: glossary.rst:621
msgid "GIL"
msgstr "GIL"

#: glossary.rst:623
msgid "See :term:`global interpreter lock`."
msgstr "Βλ. :term:`global interpreter lock`."

#: glossary.rst:624
msgid "global interpreter lock"
msgstr "global interpreter lock"

#: glossary.rst:626
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
"Ο μηχανισμός που χρησιμοποιείται από τον διερμηνέα :term:`CPython` για να "
"διασφαλίσει ότι μόνο ένα νήμα εκτελεί Python :term:`bytecode` κάθε φορά. "
"Αυτό απλοποιεί την υλοποίηση CPython δημιουργώντας το μοντέλο αντικειμένου "
"(συμπεριλαμβανομένων κρίσιμων ενσωματωμένων τύπων όπως π.χ. :class:`dict`) "
"έμμεσα ασφαλές έναντι ταυτόχρονης πρόσβασης. Το κλείδωμα ολόκληρου του "
"διερμηνέα διευκολύνει τον διερμηνέα να είναι πολλαπλών νημάτων, εις βάρος "
"του μεγάλου μέρους του παραλληλισμού που παρέχουν οι μηχανές πολλαπλών "
"επεξεργαστών."

#: glossary.rst:635
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally intensive tasks "
"such as compression or hashing.  Also, the GIL is always released when doing "
"I/O."
msgstr ""
"Ωστόσο, ορισμένες λειτουργικές μονάδες επέκτασης, είτε τυπικές είτε τρίτων, "
"έχουν σχεδιαστεί έτσι ώστε να απελευθερώνουν το GIL όταν εκτελούν εργασίες "
"εντατικών υπολογισμών όπως συμπίεση ή κατακερματισμός. Επίσης, το GIL "
"απελευθερώνεται πάντα όταν εκτελείτε I/O."

#: glossary.rst:640
msgid ""
"As of Python 3.13, the GIL can be disabled using the :option:`--disable-gil` "
"build configuration. After building Python with this option, code must be "
"run with :option:`-X gil=0 <-X>` or after setting the :envvar:`PYTHON_GIL=0 "
"<PYTHON_GIL>` environment variable. This feature enables improved "
"performance for multi-threaded applications and makes it easier to use multi-"
"core CPUs efficiently. For more details, see :pep:`703`."
msgstr ""
"Από την έκδοση Python 3.13, ο GIL μπορεί να απενεργοποιηθεί χρησιμοποιώντας "
"τη ρύθμιση :option:`--disable-gil` κατά τη διαμόρφωση της κατασκευής. Μετά "
"την κατασκευή της Python με αυτήν με αυτήν την επιλογή, ο κώδικας πρέπει να "
"εκτελείται με την επιλογή :option:`-X gil=0 <-X>` ή αφού ρυθμιστεί η "
"μεταβλητή περιβάλλοντος :envvar:`PYTHON_GIL=0 <PYTHON_GIL>`. Αυτή η "
"δυνατότητα επιτρέπει βελτιωμένη απόδοση για εφαρμογές πολλαπλών νημάτων και "
"διευκολύνει τη χρήση των επεξεργαστών πολλαπλών πυρήνων με αποδοτικό τρόπο. "
"Για περισσότερες λεπτομέρειες, δείτε το :pep:`703`."

#: glossary.rst:647
msgid ""
"In prior versions of Python's C API, a function might declare that it "
"requires the GIL to be held in order to use it. This refers to having an :"
"term:`attached thread state`."
msgstr ""
"Σε προηγούμενες εκδόσεις του C API της Python, μια συνάρτηση μπορεί να "
"δηλώνει ότι απαιτεί την τήρηση του GIL για να χρησιμοποιηθεί. Αυτό "
"αναφέρεται στην ύπαρξη μιας κατάστασης :term:`attached thread state`."

#: glossary.rst:650
msgid "hash-based pyc"
msgstr "hash-based pyc"

#: glossary.rst:652
msgid ""
"A bytecode cache file that uses the hash rather than the last-modified time "
"of the corresponding source file to determine its validity. See :ref:`pyc-"
"invalidation`."
msgstr ""
"Ένα αρχείο κρυφής μνήμης *bytecode* που χρησιμοποιεί τον κατακερματισμό και "
"όχι τον χρόνο τροποποίησης του αντίστοιχου αρχείου προέλευσης για να "
"προσδιορίσει την εγκυρότητα του. Βλ. :ref:`pyc-invalidation`."

#: glossary.rst:655
msgid "hashable"
msgstr "hashable"

#: glossary.rst:657
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`~object.__hash__` method), and can be "
"compared to other objects (it needs an :meth:`~object.__eq__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""
"Ένα αντικείμενο είναι *hashable* εάν έχει μια τιμή κατακερματισμού που δεν "
"αλλάζει ποτέ κατά τη διάρκεια της ζωής του (χρειάζεται μια μέθοδο :meth:"
"`~object.__hash__`) , και μπορεί να συγκριθεί με άλλα αντικείμενα "
"(χρειάζεται μια μέθοδο :meth:`~object.__eq__`) . Τα *hashable* αντικείμενα "
"που συγκρίνονται ως προς την ισότητα τους πρέπει να έχουν την ίδια τιμή "
"κατακερματισμού."

#: glossary.rst:663
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
"Η ύπαρξη *hashable* κάνει ένα αντικείμενο να μπορεί να χρησιμοποιηθεί ως "
"κλειδί λεξικού και ως μέλος ενός συνόλου, επειδή αυτές οι δομές δεδομένων "
"χρησιμοποιούν τιμές κατακερματισμού."

#: glossary.rst:666
msgid ""
"Most of Python's immutable built-in objects are hashable; mutable containers "
"(such as lists or dictionaries) are not; immutable containers (such as "
"tuples and frozensets) are only hashable if their elements are hashable.  "
"Objects which are instances of user-defined classes are hashable by "
"default.  They all compare unequal (except with themselves), and their hash "
"value is derived from their :func:`id`."
msgstr ""
"Τα περισσότερα από τα αμετάβλητα ενσωματωμένα αντικείμενα της Python μπορούν "
"να κατακερματιστούν' τα μεταβλητά κοντέινερ (όπως οι λίστες ή τα λεξικά) δεν "
"είναι' τα αμετάβλητα κοντέινερ (όπως πλειάδες και τα frozesets) μπορούν να "
"κατακερματιστούν μόνο εάν τα στοιχεία τους είναι κατακερματισμένα. Τα "
"αντικείμενα που είναι στιγμιότυπα κλάσεων που ορίζονται από το χρήστη "
"μπορούν να κατακερματιστούν από προεπιλογή. Όλα συγκρίνονται άνισα εκτός από "
"τον εαυτό τους) και η τιμή κατακερματισμού τους προέρχεται από το :func:`id`."

#: glossary.rst:673
msgid "IDLE"
msgstr "IDLE"

#: glossary.rst:675
msgid ""
"An Integrated Development and Learning Environment for Python. :ref:`idle` "
"is a basic editor and interpreter environment which ships with the standard "
"distribution of Python."
msgstr ""
"Ένα ολοκληρωμένο περιβάλλον ανάπτυξης και μάθησης για την Python. :ref:"
"`idle` είναι ένα βασικό περιβάλλον επεξεργασίας και διερμηνέα που "
"συνοδεύεται από την τυπική διανομή της Python."

#: glossary.rst:678
msgid "immortal"
msgstr "Αθάνατο"

#: glossary.rst:680
msgid ""
"*Immortal objects* are a CPython implementation detail introduced in :pep:"
"`683`."
msgstr ""
"*Αθάνατα αντικείμενα* είναι μια λεπτομέρεια υλοποίησης της CPython που "
"εισήχθη στην :pep:`683`."

#: glossary.rst:683
msgid ""
"If an object is immortal, its :term:`reference count` is never modified, and "
"therefore it is never deallocated while the interpreter is running. For "
"example, :const:`True` and :const:`None` are immortal in CPython."
msgstr ""
"Εάν ένα αντικείμενο είναι αθάνατο, ο :term:`πλήθος αναφοράς` του δεν "
"τροποποιείται, και επομένως δεν εκχωρείται ποτέ ενώ εκτελείται ο διερμηνέας. "
"Για παράδειγμα, :const:`True` και :const:`None` είναι αθάνατα στην CPython."

#: glossary.rst:687
msgid ""
"Immortal objects can be identified via :func:`sys._is_immortal`, or via :c:"
"func:`PyUnstable_IsImmortal` in the C API."
msgstr ""
"Τα αθάνατα αντικείμενα μπορούν να αναγνωριστούν μέσω της :func:`sys."
"_is_immortal`, ή μέσω της :c:func:`PyUnstable_IsImmortal` στο C API."

#: glossary.rst:689
msgid "immutable"
msgstr "immutable"

#: glossary.rst:691
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
"Ένα αντικείμενο με σταθερή τιμή.  Τα αμετάβλητα αντικείμενα περιλαμβάνουν "
"αριθμούς , συμβολοσειρές και πλειάδες. Ένα τέτοιο αντικείμενο δεν μπορεί να "
"αλλάξει. Ένα νέο αντικείμενο πρέπει να δημιουργηθεί εάν πρέπει να "
"αποθηκευτεί μια διαφορετική τιμή. Παίζουν σημαντικό ρόλο σε μέρη όπου μια "
"σταθερά απαιτείται, για παράδειγμα ως κλειδί σε ένα λεξικό."

#: glossary.rst:696
msgid "import path"
msgstr "εισαγόμενο path"

#: glossary.rst:698
msgid ""
"A list of locations (or :term:`path entries <path entry>`) that are searched "
"by the :term:`path based finder` for modules to import. During import, this "
"list of locations usually comes from :data:`sys.path`, but for subpackages "
"it may also come from the parent package's ``__path__`` attribute."
msgstr ""
"Μια λίστα από τοποθεσίες (ή :term:`καταχωρίσεις διαδρομής <path entry>`) που "
"μπορούν να αναζητηθούν :term:`path based finder` για να εισαχθούν modules. "
"Κατά την διαδικασία εισαγωγής, αυτή η λίστα με τοποθεσίες συνήθως έρχεται "
"από :data:`sys.path`, αλλά για τα υποπακέτα μπορεί επίσης να έρθει από το "
"χαρακτηριστικό του πακέτου γονέα ``__path__``."

#: glossary.rst:703
msgid "importing"
msgstr "εισαγωγή"

#: glossary.rst:705
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"Η διαδικασία κατά την οποία ο κώδικας της Python σε ένα module είναι "
"διαθέσιμη στον κώδικα Python ενός άλλου module."

#: glossary.rst:707
msgid "importer"
msgstr "εισαγωγέας"

#: glossary.rst:709
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and :"
"term:`loader` object."
msgstr ""
"Ένα αντικείμενο μπορεί και να αναζητεί και να φορτώνει ένα module' και ένα :"
"term:`finder` και :term:`loader` αντικείμενο."

#: glossary.rst:711
msgid "interactive"
msgstr "διαδραστικός"

#: glossary.rst:713
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``). "
"For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"Η Python έχει έναν διαδραστικό διερμηνέα όπου σημαίνει ότι μπορείς να "
"εισάγεις δηλώσεις και εκφράσεις στην εισαγωγή εντολών του διερμηνέα, "
"εκτελώντας τες άμεσα και εμφανίζοντας τα αποτελέσματα. Απλώς εκκινήστε την "
"``python`` χωρίς ορίσματα (πιθανώς επιλέγοντας το από το κύριο μενού του "
"υπολογιστή σας). Αποτελεί έναν αποδοτικό τρόπο για να δοκιμάστε νέες ιδέες ή "
"να εξετάστε modules και πακέτα (θυμηθείτε ``help(x)``). Για περισσότερα "
"σχετικά με τη διαδραστική λειτουργία, δείτε :ref:`tut-interac`."

#: glossary.rst:720
msgid "interpreted"
msgstr "interpreted"

#: glossary.rst:722
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler.  "
"This means that source files can be run directly without explicitly creating "
"an executable which is then run. Interpreted languages typically have a "
"shorter development/debug cycle than compiled ones, though their programs "
"generally also run more slowly.  See also :term:`interactive`."
msgstr ""
"Η Python είναι μια interpreted γλώσσα, σε αντίθεση με μια μεταγλωττισμένη, "
"αν και η διάκριση μπορεί να είναι και θολή λόγω της παρουσία του bytecode "
"μεταγλωττιστή. Αυτό σημαίνει ότι τα αρχεία προέλευσης μπορούν να εκτελεστούν "
"απευθείας χωρίς να δημιουργηθεί ρητά ένα εκτελέσιμο αρχείο που στην συνέχεια "
"εκτελείται. Οι interpreted γλώσσες συνήθως έχουν μικρότερο κύκλο ανάπτυξης/ "
"εντοπισμού σφαλμάτων από τις μεταγλωττισμένες, αν και τα προγράμματά τους "
"γενικά εκτελούνται πιο αργά. Βλ. επίσης :term:`interactive`."

#: glossary.rst:729
msgid "interpreter shutdown"
msgstr "τερματισμός λειτουργίας διερμηνέα"

#: glossary.rst:731
msgid ""
"When asked to shut down, the Python interpreter enters a special phase where "
"it gradually releases all allocated resources, such as modules and various "
"critical internal structures.  It also makes several calls to the :term:"
"`garbage collector <garbage collection>`. This can trigger the execution of "
"code in user-defined destructors or weakref callbacks. Code executed during "
"the shutdown phase can encounter various exceptions as the resources it "
"relies on may not function anymore (common examples are library modules or "
"the warnings machinery)."
msgstr ""
"Όταν ζητείται τερματισμός λειτουργίας, ο διερμηνέας της Python εισέρχεται σε "
"μια ειδική φάση όπου απελευθερώνει σταδιακά όλους τους διατιθέμενους πόρους, "
"όπως λειτουργικές μονάδες και πολλαπλές κρίσιμες εσωτερικές δομές.  Επίσης "
"πραγματοποιεί αρκετές κλήσεις στο :term:`συλλέκτης σκουπιδιών <garbage "
"collection>`. Αυτό μπορεί να ενεργοποιήσει την εκτέλεση κώδικα σε "
"καταστροφείς που ορίζονται από το χρήστη ή σε callbacks ασθενούς "
"ανταποκρίσεις. Ο κώδικας που εκτελείται κατά τη φάση τερματισμού λειτουργίας "
"μπορεί να συναντήσει διάφορες εξαιρέσεις, καθώς οι πόροι στους οποίους "
"βασίζεται ενδέχεται να μην λειτουργούν πλέον (συνήθη παραδείγματα είναι οι "
"λειτουργικές μονάδες βιβλιοθήκης ή ο μηχανισμός ειδοποιήσεων)."

#: glossary.rst:740
msgid ""
"The main reason for interpreter shutdown is that the ``__main__`` module or "
"the script being run has finished executing."
msgstr ""
"Ο βασικός λόγος τερματισμού λειτουργίας του διερμηνέα είναι ότι το "
"``__main__`` module ή ολοκληρώθηκε η εκτέλεση του κώδικα που έτρεχε."

#: glossary.rst:742
msgid "iterable"
msgstr "iterable"

#: glossary.rst:744
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict`, :term:"
"`file objects <file object>`, and objects of any classes you define with an :"
"meth:`~object.__iter__` method or with a :meth:`~object.__getitem__` method "
"that implements :term:`sequence` semantics."
msgstr ""
"Ένα αντικείμενο ικανό να επιστρέψει τα μέλη του ένα κάθε φορά. Παραδείγματα "
"iterables περιλαμβάνουν όλους του τύπους ακολουθιών (όπως :class:`list`, :"
"class:`str`, και :class:`tuple`) και μερικούς τύπους μη ακολουθίας όπως :"
"class:`dict`, :term:`αντικείμενο αρχείου <file object>`, και αντικείμενα "
"οποιονδήποτε κλάσεων που μπορούν να οριστούν με μια μέθοδο :meth:`~object."
"__iter__` ή με μία μέθοδο :meth:`~object.__getitem__` που υλοποιεί τη "
"σημασιολογία :term:`sequence`."

#: glossary.rst:752
msgid ""
"Iterables can be used in a :keyword:`for` loop and in many other places "
"where a sequence is needed (:func:`zip`, :func:`map`, ...).  When an "
"iterable object is passed as an argument to the built-in function :func:"
"`iter`, it returns an iterator for the object.  This iterator is good for "
"one pass over the set of values.  When using iterables, it is usually not "
"necessary to call :func:`iter` or deal with iterator objects yourself.  The :"
"keyword:`for` statement does that automatically for you, creating a "
"temporary unnamed variable to hold the iterator for the duration of the "
"loop.  See also :term:`iterator`, :term:`sequence`, and :term:`generator`."
msgstr ""
"Τα iterables μπορούν να χρησιμοποιηθούν σε ένα :keyword:`for` βρόχο και σε "
"πολλά άλλα σημεία όπου χρειάζεται μια ακολουθία (:func:`zip`, :func:"
"`map`, ...). Όταν ένα iterable αντικείμενο μεταβιβάζεται ως όρισμα στην "
"ενσωματωμένη συνάρτηση :func:`iter`, επιστρέφει έναν iterator για "
"αντικείμενο. Αυτός ο iterator είναι καλός για ένα πέρασμα από ένα σύνολο "
"τιμών. Όταν χρησιμοποιείται επαναληπτικά, συνήθως δεν είναι απαραίτητο να "
"καλέσετε το :func:`iter` ή να ασχοληθείτε μόνοι σας με αντικείμενα iterator. "
"Η δήλωση :keyword:`for` το κάνει αυτόματα για εσάς, δημιουργώντας μια "
"προσωρινή μεταβλητή χωρίς όνομα για να κρατά τον iterator για την διάρκεια "
"του βρόχου. Βλ. επίσης :term:`iterator`, :term:`sequence`, και :term:"
"`generator`."

#: glossary.rst:762
msgid "iterator"
msgstr "iterator"

#: glossary.rst:764
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's :"
"meth:`~iterator.__next__` method (or passing it to the built-in function :"
"func:`next`) return successive items in the stream.  When no more data are "
"available a :exc:`StopIteration` exception is raised instead.  At this "
"point, the iterator object is exhausted and any further calls to its :meth:`!"
"__next__` method just raise :exc:`StopIteration` again.  Iterators are "
"required to have an :meth:`~iterator.__iter__` method that returns the "
"iterator object itself so every iterator is also iterable and may be used in "
"most places where other iterables are accepted.  One notable exception is "
"code which attempts multiple iteration passes.  A container object (such as "
"a :class:`list`) produces a fresh new iterator each time you pass it to the :"
"func:`iter` function or use it in a :keyword:`for` loop.  Attempting this "
"with an iterator will just return the same exhausted iterator object used in "
"the previous iteration pass, making it appear like an empty container."
msgstr ""
"Ένα αντικείμενο που αντιπροσωπεύει μια ροή δεδομένων. Επαναλαμβανόμενες "
"κλήσεις προς τη μέθοδο :meth:`~iterator.__next__` του iterator (ή μεταβίβαση "
"του στην ενσωματωμένη συνάρτηση :func:`next`) επιστρέφουν διαδοχικά στοιχεία "
"στην ροή. Όταν όχι περισσότερα δεδομένα είναι διαθέσιμα εγείρεται μια "
"εξαίρεση :exc:`StopIteration`. Σε αυτό το σημείο, το αντικείμενο iterator "
"εξαντλείται και τυχόν περαιτέρω κλήσεις στη μέθοδο :meth:`!__next__` απλώς "
"απλά εγείρουν ξανά το :exc:`StopIteration`. Οι iterators πρέπει να έχουν μια "
"μέθοδο :meth:`~iterator.__iter__` που επιστρέφει το ίδιο το αντικείμενο "
"iterator, έτσι ώστε κάθε iterator να είναι επίσης iterable και μπορεί να "
"χρησιμοποιηθεί στα περισσότερα μέρη όπου γίνονται αποδεκτοί και άλλοι "
"iterators. Μια αξιοσημείωτη εξαίρεση είναι ο κώδικας που επιχειρεί πολλαπλά "
"περάσματα iteration. Ένα αντικείμενο κοντέινερ (όπως ένα :class:`list`) "
"παράγει έναν καθαρά νέο iterator κάθε φορά που κάθε φορά που μεταβιβάζεται "
"στην συνάρτηση :func:`iter` ή τον χρησιμοποιείται σε έναν :keyword:`for` "
"βρόχο. Εάν επιχειρήσετε αυτό με έναν iterator απλώς θα επιστρέψετε το ίδιο "
"εξαντλημένο αντικείμενο iterator που χρησιμοποιήθηκε στο προηγούμενο πέρασμα "
"iteration , κάνοντας το να φαίνεται σαν ένα άδειο κοντέινερ."

#: glossary.rst:779
msgid "More information can be found in :ref:`typeiter`."
msgstr "Περισσότερες πληροφορίες μπορούν να βρεθούν στο :ref:`typeiter`."

#: glossary.rst:783
msgid ""
"CPython does not consistently apply the requirement that an iterator define :"
"meth:`~iterator.__iter__`. And also please note that the free-threading "
"CPython does not guarantee the thread-safety of iterator operations."
msgstr ""
"Το CPython δεν εφαρμόζει με συνέπεια την απαίτηση να ορίζει ένας iterator :"
"meth:`~iterator.__iter__`. Επίσης σημειώστε ότι η έκδοση CPython με ελεύθερη "
"υποστήριξη νημάτων δεν εγγυάται την ασφάλεια νημάτων για διαδικασίες με "
"iterators."

#: glossary.rst:788
msgid "key function"
msgstr "συνάρτηση key"

#: glossary.rst:790
msgid ""
"A key function or collation function is a callable that returns a value used "
"for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
"Μια συνάρτηση κλειδί ή μια συνάρτηση ταξινόμησης είναι μια δυνατότητα κλήσης "
"που επιστρέφει μια τιμή που χρησιμοποιείται για ταξινόμηση ή διάταξη. Για "
"παράδειγμα, :func:`locale.strxfrm` χρησιμοποιείται για την παραγωγή ενός "
"κλειδιού ταξινόμησης που γνωρίζει τις συμβάσεις ταξινόμησης για "
"συγκεκριμένες τοπικές ρυθμίσεις."

#: glossary.rst:795
msgid ""
"A number of tools in Python accept key functions to control how elements are "
"ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`, :"
"meth:`list.sort`, :func:`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq."
"nlargest`, and :func:`itertools.groupby`."
msgstr ""
"Ένα αριθμός εργαλείων στην Python δέχεται βασικές συναρτήσεις για τον έλεγχο "
"του τρόπου με τον οποίο τα στοιχεία ταξινομούνται ή ομαδοποιούνται. Αυτά "
"περιέχουν :func:`min`, :func:`max`, :func:`sorted`, :meth:`list.sort`, :func:"
"`heapq.merge`, :func:`heapq.nsmallest`, :func:`heapq. nlargest`, και :func:"
"`itertools.groupby`."

#: glossary.rst:801
msgid ""
"There are several ways to create a key function.  For example. the :meth:"
"`str.lower` method can serve as a key function for case insensitive sorts.  "
"Alternatively, a key function can be built from a :keyword:`lambda` "
"expression such as ``lambda r: (r[0], r[2])``.  Also, :func:`operator."
"attrgetter`, :func:`operator.itemgetter`, and :func:`operator.methodcaller` "
"are three key function constructors.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""
"Υπάρχουν διάφοροι τρόποι για να δημιουργήσετε μια συνάρτηση κλειδιού. Για "
"παράδειγμα. η μέθοδος :meth:`str.lower` μπορεί να χρησιμεύσει ως συνάρτηση "
"κλειδί για την περίπτωση μη διάκρισης πεζών-κεφαλαίων. Εναλλακτικά, μια "
"συνάρτηση κλειδιού μπορεί να δημιουργηθεί από μια :keyword:`lambda` έκφραση "
"όπως ``lambda r: (r[0], r[2])``.  Επίσης, :func:`operator.attrgetter`, :func:"
"`operator.itemgetter` και :func:`operator.methodcaller` είναι τρεις "
"κατασκευαστές βασικών συναρτήσεων. Βλ. το :ref:`Ταξινόμηση HOW "
"TO<sortinghowto>` για παραδείγματα δημιουργίας και χρήσης βασικών "
"συναρτήσεων."

#: glossary.rst:808
msgid "keyword argument"
msgstr "όρισμα keyword"

#: glossary.rst:1125
msgid "See :term:`argument`."
msgstr "Βλ. :term:`argument`."

#: glossary.rst:811
msgid "lambda"
msgstr "lambda"

#: glossary.rst:813
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which "
"is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Μια ανώνυμη ενσωματωμένη συνάρτηση που αποτελείται από μια μοναδική :term:"
"`expression` η οποία αξιολογείται όταν καλείται η συνάρτηση. Η σύνταξη για "
"τη δημιουργία μιας συνάρτησης lambda είναι ``lambda [parameters]: "
"expression``"

#: glossary.rst:816
msgid "LBYL"
msgstr "LBYL"

#: glossary.rst:818
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions "
"before making calls or lookups.  This style contrasts with the :term:`EAFP` "
"approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
"Look before you leap.  Αυτό το στυλ κωδικοποίησης ελέγχει ρητά τις "
"προϋποθέσεις πριν πραγματοποιήσει κλήσεις ή αναζητήσεις.  Αυτό το στυλ "
"έρχεται σε αντίθεση με την προσέγγιση :term:`EAFP` και χαρακτηρίζεται από "
"την παρουσία πολλών δηλώσεων :keyword:`if`."

#: glossary.rst:823
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
"Σε ένα περιβάλλον πολλαπλών νημάτων, η προσέγγιση LBYL μπορεί να "
"διακινδυνεύσει να εισάγει μια συνθήκη αγώνα μεταξύ \"the Looking\" και \"the "
"leaping\". Για παράδειγμα ο κώδικας, ``if key in mapping: return "
"mapping[key]`` μπορεί να αποτύχει εάν ένα άλλο νήμα αφαιρέσει το *key* από "
"το *mapping* μετά τη δοκιμή, αλλά πριν από την αναζήτηση. Αυτό το πρόβλημα "
"μπορεί να λυθεί με κλειδώματα ή χρησιμοποιώντας την προσέγγιση EAFP."

#: glossary.rst:828
msgid "lexical analyzer"
msgstr "λεξικός αναλυτής"

#: glossary.rst:831
msgid "Formal name for the *tokenizer*; see :term:`token`."
msgstr "Επίσημη ονομασία για τον *tokenizer* · βλ. :term:`token`."

#: glossary.rst:832
msgid "list"
msgstr "λίστα"

#: glossary.rst:834
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"*O*\\ (1)."
msgstr ""
"Ένα ενσωματωμένο Python :term:`sequence`.  Παρά το όνομα του, μοιάζει "
"περισσότερο με έναν πίνακα σε άλλες γλώσσες παρά με μια συνδεδεμένη λίστα, "
"καθώς η πρόσβαση στα στοιχεί είναι *O*\\ (1)."

#: glossary.rst:837
msgid "list comprehension"
msgstr "list comprehension"

#: glossary.rst:839
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = ['{:#04x}'.format(x) for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""
"Ένα συμπαγής τρόπος για να επεξεργαστείτε όλα ή μέρος των στοιχείων σε μια "
"ακολουθία και να επιστρέψετε μια λίστα με τα αποτελέσματα. ``result = ['{:"
"#04x}'.format(x) for x in range(256) if x % 2 == 0]`` δημιουργεί μια λίστα "
"συμβολοσειρών που περιέχουν ζυγούς δεκαεξαδικούς αριθμούς (0x..) στο εύρος "
"από 0 έως 255. Η πρόταση :keyword:`if` είναι προαιρετική. Εάν παραλειφθεί, "
"όλα τα στοιχεία στο ``range(256)`` υποβάλλονται σε επεξεργασία."

#: glossary.rst:845
msgid "loader"
msgstr "loader"

#: glossary.rst:847
msgid ""
"An object that loads a module. It must define the :meth:`!exec_module` and :"
"meth:`!create_module` methods to implement the :class:`~importlib.abc."
"Loader` interface. A loader is typically returned by a :term:`finder`. See "
"also:"
msgstr ""
"Ένα αντικείμενο που φορτώνει ένα module. Πρέπει να ορίζει τις μεθόδους :meth:"
"`!exec_module` και :meth:`!create_module` για την υλοποίηση της διεπαφής :"
"class:`~importlib.abc.Loader`. Ένας loader συνήθως επιστρέφεται με ένα :term:"
"`finder`. Δείτε επίσης:"

#: glossary.rst:853
msgid ":ref:`finders-and-loaders`"
msgstr ":ref:`finders-and-loaders`"

#: glossary.rst:854
msgid ":class:`importlib.abc.Loader`"
msgstr ":class:`importlib.abc.Loader`"

#: glossary.rst:855
msgid ":pep:`302`"
msgstr ":pep:`302`"

#: glossary.rst:856
msgid "locale encoding"
msgstr "τοπική κωδικοποίηση"

#: glossary.rst:858
msgid ""
"On Unix, it is the encoding of the LC_CTYPE locale. It can be set with :func:"
"`locale.setlocale(locale.LC_CTYPE, new_locale) <locale.setlocale>`."
msgstr ""
"Στο Unix, είναι η κωδικοποίηση της τοπική ρύθμισης LC_CTYPE. Μπορεί να "
"ρυθμιστεί με :func:`locale.setlocale(locale.LC_CTYPE, new_locale) <locale."
"setlocale>`."

#: glossary.rst:861
msgid "On Windows, it is the ANSI code page (ex: ``\"cp1252\"``)."
msgstr "Στα Windows, είναι η code page ANSI (π.χ. ``\"cp1252\"``)."

#: glossary.rst:863
msgid ""
"On Android and VxWorks, Python uses ``\"utf-8\"`` as the locale encoding."
msgstr ""
"Στο Android και το VxWorks, η Python χρησιμοποιεί το ``\"utf-8\"`` ως τοπική "
"κωδικοποίηση."

#: glossary.rst:865
msgid ":func:`locale.getencoding` can be used to get the locale encoding."
msgstr ""
":func:`locale.getencoding` μπορεί να χρησιμοποιηθεί για την ανάκτηση της "
"τοπικής κωδικοποίησης."

#: glossary.rst:867
msgid "See also the :term:`filesystem encoding and error handler`."
msgstr "Βλ. επίσης το :term:`filesystem encoding and error handler`."

#: glossary.rst:868
msgid "magic method"
msgstr "μαγική μέθοδος"

#: glossary.rst:872
msgid "An informal synonym for :term:`special method`."
msgstr "Ένα άτυπο συνώνυμο για :term:`special method`."

#: glossary.rst:873
msgid "mapping"
msgstr "mapping"

#: glossary.rst:875
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`collections.abc.Mapping` or :class:"
"`collections.abc.MutableMapping` :ref:`abstract base classes <collections-"
"abstract-base-classes>`.  Examples include :class:`dict`, :class:"
"`collections.defaultdict`, :class:`collections.OrderedDict` and :class:"
"`collections.Counter`."
msgstr ""
"Ένα αντικείμενο κοντέινερ που υποστηρίζει αυθαίρετες αναζητήσεις κλειδιών "
"και υλοποιεί τις μεθόδους που καθορίζονται στο :class:`collections.abc."
"Mapping` ή :class:`collections.abc.MutableMapping` :ref:`abstract base "
"classes <collections-abstract-base-classes>`. Τα παραδείγματα περιλαμβάνουν :"
"class:`dict`, :class:`collections.defaultdict`, :class:`collections."
"OrderedDict` και :class:`collections.Counter`."

#: glossary.rst:881
msgid "meta path finder"
msgstr "meta path finder"

#: glossary.rst:883
msgid ""
"A :term:`finder` returned by a search of :data:`sys.meta_path`.  Meta path "
"finders are related to, but different from :term:`path entry finders <path "
"entry finder>`."
msgstr ""
"Ένας :term:`finder` που επιστράφηκε με αναζήτηση στο :data:`sys.meta_path`. "
"Οι finders μετα-διαδρομής σχετίζονται, αλλά διαφέρουν από τα :term:`finders "
"entry διαδρομής <path entry finder>`."

#: glossary.rst:887
msgid ""
"See :class:`importlib.abc.MetaPathFinder` for the methods that meta path "
"finders implement."
msgstr ""
"Βλ. :class:`importlib.abc.MetaPathFinder` για τις μεθόδους που υλοποιούν οι "
"meta path finders."

#: glossary.rst:889
msgid "metaclass"
msgstr "μετα-κλάση"

#: glossary.rst:891
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
"Η κλάση μιας κλάσης. Οι ορισμοί κλάσης δημιουργούν ένα όνομα κλάσης, ένα "
"λεξικό κλάσης και μια λίστα βασικών κλάσεων. Η μετα-κλάση είναι υπεύθυνη για "
"την απόκτηση αυτών των τριών ορισμάτων και την δημιουργία της κλάσης. Οι "
"περισσότερες αντικειμενοστρεφείς γλώσσες προγραμματισμού παρέχουν μια "
"προεπιλεγμένη υλοποίηση. Αυτό που κάνει την Python ξεχωριστή είναι ότι είναι "
"δυνατή η δημιουργία προσαρμοσμένων μετακλάσεων. Οι περισσότεροι χρήστες δεν "
"χρειάζονται ποτέ αυτό το εργαλείο, αλλά όταν παραστεί ανάγκη, αυτό το "
"εργαλείο, οι μετα-κλάσεις μπορούν να παρέχουν ισχυρές, κομψές λύσεις. Έχουν "
"χρησιμοποιηθεί για την καταγραφή πρόσβασης χαρακτηριστικών, την προσθήκη "
"ασφάλειας νημάτων, την παρακολούθηση δημιουργίας αντικειμένων, την υλοποίηση "
"*singletons*, και πολλές άλλες εργασίες."

#: glossary.rst:901
msgid "More information can be found in :ref:`metaclasses`."
msgstr "Περισσότερες πληροφορίες μπορούν να βρεθούν στο :ref:`metaclasses`."

#: glossary.rst:1270
msgid "method"
msgstr "μέθοδος"

#: glossary.rst:904
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its "
"first :term:`argument` (which is usually called ``self``). See :term:"
"`function` and :term:`nested scope`."
msgstr ""
"Μια συνάρτηση που ορίζεται μέσα στο σώμα μιας κλάσης.  Εάν καλείται ως "
"χαρακτηριστικό μιας περίπτωσης αυτής της κλάσης, η μέθοδος θα λάβει "
"αντικείμενο περίπτωσης ως πρώτο της :term:`argument` (το οποίο συνήθως "
"ονομάζεται ``self``). Βλ. :term:`function` και :term:`nested scope`."

#: glossary.rst:908
msgid "method resolution order"
msgstr "σειρά ανάλυσης μεθόδων"

#: glossary.rst:910
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See :ref:`python_2.3_mro` for details of the "
"algorithm used by the Python interpreter since the 2.3 release."
msgstr ""
"Η Σειρά Ανάλυσης Μεθόδων είναι η σειρά με την οποία οι βασικές κλάσεις "
"αναζητούνται για ένα μέλος κατά την αναζήτησης. Βλ. :ref:`python_2.3_mro` "
"για λεπτομέρειες του αλγορίθμου που χρησιμοποιείται από τον διερμηνέα της "
"Python από την έκδοση 2.3."

#: glossary.rst:913
msgid "module"
msgstr "module"

#: glossary.rst:915
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Ένα αντικείμενο που χρησιμεύει ως οργανωτική μονάδα του κώδικα της Python.  "
"Τα modules έχουν έναν χώρο ονομάτων που περιέχει αυθαίρετα αντικείμενα "
"Python.  Τα modules φορτώνονται στην Python με την διαδικασία :term:"
"`importing`."

#: glossary.rst:919
msgid "See also :term:`package`."
msgstr "Βλ. επίσης :term:`package`."

#: glossary.rst:920
msgid "module spec"
msgstr "τεχνικές προδιαγραφές module"

#: glossary.rst:922
msgid ""
"A namespace containing the import-related information used to load a module. "
"An instance of :class:`importlib.machinery.ModuleSpec`."
msgstr ""
"Ένα namespace που περιέχει τις πληροφορίες που σχετίζονται με την εισαγωγή "
"που χρησιμοποιούνται για την φόρτωση ενός module. Μια περίπτωση του :class:"
"`importlib.machinery.ModuleSpec`."

#: glossary.rst:925
msgid "See also :ref:`module-specs`."
msgstr "Βλ. επίσης :ref:`module-specs`."

#: glossary.rst:926
msgid "MRO"
msgstr "MRO"

#: glossary.rst:928
msgid "See :term:`method resolution order`."
msgstr "Βλ. :term:`method resolution order`."

#: glossary.rst:929
msgid "mutable"
msgstr "mutable"

#: glossary.rst:931
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also :"
"term:`immutable`."
msgstr ""
"Τα ευμετάβλητα αντικείμενα μπορούν να αλλάξουν τις τιμές αλλά να κρατήσουν "
"τα :func:`id`. Βλ. επίσης :term:`immutable`."

#: glossary.rst:933
msgid "named tuple"
msgstr "named tuple"

#: glossary.rst:935
msgid ""
"The term \"named tuple\" applies to any type or class that inherits from "
"tuple and whose indexable elements are also accessible using named "
"attributes.  The type or class may have other features as well."
msgstr ""
"Ο όρος \"named tuple\" εφαρμόζεται για οποιονδήποτε τύπο ή κλάση που "
"κληρονομείται από την πλειάδα και των οποίων τα στοιχεία μπορούν να "
"ευρετηριοποιηθούν είναι προσβάσιμα χρησιμοποιώντας επώνυμα χαρακτηριστικά.  "
"Ο τύπος ή η κλάση μπορεί να έχει και άλλα χαρακτηριστικά."

#: glossary.rst:939
msgid ""
"Several built-in types are named tuples, including the values returned by :"
"func:`time.localtime` and :func:`os.stat`.  Another example is :data:`sys."
"float_info`::"
msgstr ""
"Πολλοί ενσωματωμένοι τύποι είναι named tuples, συμπεριλαμβανομένων των τιμών "
"που επιστρέφονται από :func:`time.localtime` και :func:`os.stat`. Ένα άλλο "
"παράδειγμα είναι το :data:`sys.float_info`::"

#: glossary.rst:943
msgid ""
">>> sys.float_info[1]                   # indexed access\n"
"1024\n"
">>> sys.float_info.max_exp              # named field access\n"
"1024\n"
">>> isinstance(sys.float_info, tuple)   # kind of tuple\n"
"True"
msgstr ""
">>> sys.float_info[1]                   # indexed access\n"
"1024\n"
">>> sys.float_info.max_exp              # named field access\n"
"1024\n"
">>> isinstance(sys.float_info, tuple)   # kind of tuple\n"
"True"

#: glossary.rst:950
msgid ""
"Some named tuples are built-in types (such as the above examples). "
"Alternatively, a named tuple can be created from a regular class definition "
"that inherits from :class:`tuple` and that defines named fields.  Such a "
"class can be written by hand, or it can be created by inheriting :class:"
"`typing.NamedTuple`, or with the factory function :func:`collections."
"namedtuple`.  The latter techniques also add some extra methods that may not "
"be found in hand-written or built-in named tuples."
msgstr ""
"Ορισμένες αναγνωρισμένες πλειάδες είναι ενσωματωμένοι τύποι (όπως τα "
"παραπάνω παραδείγματα). Εναλλακτικά, μια αναγνωρισμένη πλειάδα μπορεί να "
"δημιουργηθεί από έναν ορισμό κανονικής κλάσης που κληρονομεί από :class:"
"`tuple` και που ορίζει έγκυρα πεδία. Μια τέτοια κλάση μπορεί να είναι "
"γραμμένη με το χέρι ή μπορεί να δημιουργηθεί κληρονομώντας το :class:`typing."
"NamedTuple`, ή με την factory συνάρτηση :func:`collections.namedtuple`. Οι "
"τελευταίες τεχνικές προσθέτουν επίσης μερικές επιπλέον μεθόδους που μπορεί "
"να μην βρεθούν σε χειρόγραφες ή ενσωματωμένες πλειάδες με όνομα."

#: glossary.rst:958
msgid "namespace"
msgstr "namespace"

#: glossary.rst:960
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity "
"by preventing naming conflicts.  For instance, the functions :func:`builtins."
"open <.open>` and :func:`os.open` are distinguished by their namespaces.  "
"Namespaces also aid readability and maintainability by making it clear which "
"module implements a function.  For instance, writing :func:`random.seed` or :"
"func:`itertools.islice` makes it clear that those functions are implemented "
"by the :mod:`random` and :mod:`itertools` modules, respectively."
msgstr ""
"Το μέρος όπου αποθηκεύεται μια μεταβλητή.  Τα namespaces υλοποιούνται ως "
"λεξικά. Υπάρχουν οι τοπικοί, οι καθολικοί και οι ενσωματωμένοι namespaces "
"καθώς και οι ένθετοι namespaces σε αντικείμενα (σε μεθόδους).  Για "
"παράδειγμα οι συναρτήσεις :func:`builtins.open <.open>` και :func:`os.open` "
"διακρίνονται από τους χώρους ονομάτων τους.  Οι χώροι ονομάτων βοηθούν "
"επίσης την αναγνωσιμότητα και τη συντηρησιμότητα καθιστώντας σαφές ποιο "
"module υλοποιεί μια λειτουργία. Για παράδειγμα, γράφοντας :func:`random."
"seed` ή :func:`itertools.islice` καθιστά σαφές ότι αυτές οι συναρτήσεις "
"υλοποιούνται από τα module :mod:`random` και :mod:`itertools`, αντίστοιχα."

#: glossary.rst:970
msgid "namespace package"
msgstr "πακέτο namespace"

#: glossary.rst:972
msgid ""
"A :term:`package` which serves only as a container for subpackages. "
"Namespace packages may have no physical representation, and specifically are "
"not like a :term:`regular package` because they have no ``__init__.py`` file."
msgstr ""
"Ένα :term:`package` που χρησιμεύει μόνο ως κοντέινερ για υποπακέτα. Τα "
"πακέτα χώρου ονομάτων μπορεί να μην έχουν φυσική αναπαράσταση και "
"συγκεκριμένα να μην είναι σαν ένα :term:`regular package` επειδή δεν έχουν "
"το ``__init__.py`` αρχείο."

#: glossary.rst:977
msgid ""
"Namespace packages allow several individually installable packages to have a "
"common parent package. Otherwise, it is recommended to use a :term:`regular "
"package`."
msgstr ""
"Τα πακέτα χώρου ονομάτων επιτρέπουν σε πολλά πακέτα με δυνατότητα "
"εγκατάστασης μεμονωμένα να έχουν ένα κοινό γονικό πακέτο.  Διαφορετικά, "
"συνίσταται η χρήση ενός :term:`regular package`."

#: glossary.rst:980
msgid ""
"For more information, see :pep:`420` and :ref:`reference-namespace-package`."
msgstr ""
"Για περισσότερες πληροφορίες, δείτε το :pep:`420` και το :ref:`reference-"
"namespace-package`."

#: glossary.rst:982
msgid "See also :term:`module`."
msgstr "Βλ. επίσης :term:`module`."

#: glossary.rst:983
msgid "nested scope"
msgstr "nested scope"

#: glossary.rst:985
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes by default work only for "
"reference and not for assignment.  Local variables both read and write in "
"the innermost scope.  Likewise, global variables read and write to the "
"global namespace.  The :keyword:`nonlocal` allows writing to outer scopes."
msgstr ""
"Η δυνατότητα αναφοράς σε μια μεταβλητή σε έναν περικλειόμενο ορισμό. Για "
"παράδειγμα μια συνάρτηση που ορίζεται μέσα σε μια άλλη συνάρτηση μπορεί να "
"αναφέρεται σε μεταβλητές στην εξωτερική συνάρτηση. Σημειώστε ότι τα ένθετα "
"πεδία από προεπιλογή λειτουργούν μόνο για αναφορά και όχι για εκχώρηση. Οι "
"τοπικές μεταβλητές διαβάζονται και γράφονται στο εσωτερικό πεδίο εφαρμογής. "
"Ομοίως, οι καθολικές μεταβλητές διαβάζουν και γράφουν στον καθολικό χώρο "
"ονομάτων. Το :keyword:`nonlocal` επιτρέπει την εγγραφή σε εξωτερικά πεδία."

#: glossary.rst:992
msgid "new-style class"
msgstr "κλάση νέου στυλ"

#: glossary.rst:994
msgid ""
"Old name for the flavor of classes now used for all class objects.  In "
"earlier Python versions, only new-style classes could use Python's newer, "
"versatile features like :attr:`~object.__slots__`, descriptors, properties, :"
"meth:`~object.__getattribute__`, class methods, and static methods."
msgstr ""
"Το παλιό όνομα για το είδος των κλάσεων χρησιμοποιείται πλέον για όλα τα "
"αντικείμενα.  Σε παλιότερες εκδόσεις της Python, μόνο οι κλάσεις νέου στυλ "
"μπορούσαν να χρησιμοποιήσουν τις νεότερες, ευέλικτες δυνατότητες της Python "
"όπως :attr:`~object.__slots__`, descriptors, ιδιότητες :meth:`~object."
"__getattribute__`, μέθοδοι κλάσης, και στατικές μέθοδοι."

#: glossary.rst:999
msgid "object"
msgstr "αντικείμενο"

#: glossary.rst:1001
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Οποιαδήποτε δεδομένα με κατάσταση (χαρακτηριστικά ή τιμή) και καθορισμένη "
"συμπεριφορά (μέθοδοι). Επίσης, η τελική βασική κλάση οποιασδήποτε :term:`new-"
"style class`."

#: glossary.rst:1004
msgid "optimized scope"
msgstr "βελτιστοποιημένο πεδίο ορατότητας (scope)"

#: glossary.rst:1006
msgid ""
"A scope where target local variable names are reliably known to the compiler "
"when the code is compiled, allowing optimization of read and write access to "
"these names. The local namespaces for functions, generators, coroutines, "
"comprehensions, and generator expressions are optimized in this fashion. "
"Note: most interpreter optimizations are applied to all scopes, only those "
"relying on a known set of local and nonlocal variable names are restricted "
"to optimized scopes."
msgstr ""
"Ένα πεδίο ορατότητας (scope) όπου τα ονόματα των τοπικών μεταβλητών είναι "
"γνωστό με βεβαιότητα στον μεταγλωττιστή κατά τη μεταγλώττιση του κώδικα, "
"επιτρέποντας τη βελτιστοποίηση της πρόσβασης για ανάγνωση και εγγραφή σε "
"αυτά τα ονόματα. Οι τοπικοί χώροι ονομάτων για συναρτήσεις, γεννήτριες, "
"συναρτήσεις coroutine, συμπτύξεις (comprehensions) και εκφράσεις γεννητριών "
"βελτιστοποιούνται με αυτόν τον τρόπο. Σημείωση: οι περισσότερες "
"βελτιστοποιήσεις του διερμηνέα εφαρμόζονται σε όλα τα πεδία ορατότητας· μόνο "
"εκείνες που βασίζονται σε γνωστό σύνολο τοπικών και μη τοπικών μεταβλητών "
"περιορίζονται σε βελτιστοποιημένα πεδία ορατότητας."

#: glossary.rst:1013
msgid "package"
msgstr "πακέτο"

#: glossary.rst:1015
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with a ``__path__`` "
"attribute."
msgstr ""
"Ένα Python :term:`module` που μπορεί να περιέχει submodules ή αναδρομικά, "
"υποπακέτα. Τεχνικά, ένα πακέτο είναι μια λειτουργική μονάδα Python με ένα "
"``__path__`` χαρακτηριστικό."

#: glossary.rst:1019
msgid "See also :term:`regular package` and :term:`namespace package`."
msgstr "Βλ. επίσης :term:`regular package` και :term:`namespace package`."

#: glossary.rst:1020
msgid "parameter"
msgstr "παράμετρος"

#: glossary.rst:1022
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are five kinds of parameter:"
msgstr ""
"Μια έγκυρη οντότητα σε έναν ορισμό :term:`function` (ή μέθοδος) που "
"καθορίζει ένα :term:`argument` (ή σε ορισμένες περιπτώσεις, ορίσματα) που "
"μπορεί να δεχθεί η συνάρτηση. Υπάρχουν πέντε είδη παραμέτρων:"

#: glossary.rst:1026
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`λέξη-κλειδί ή θέση`: καθορίζει ένα όρισμα που μπορεί να μεταβιβαστεί "
"είτε :term:`θέσεως <argument>` ή ως :term:`όρισμα λέξης-κλειδιού "
"<argument>`.  Αυτό είναι το προεπιλεγμένο είδος παραμέτρου, για παράδειγμα "
"*foo* και *bar* στα ακόλουθα::"

#: glossary.rst:1031
msgid "def func(foo, bar=None): ..."
msgstr "def func(foo, bar=None): ..."

#: glossary.rst:1035
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position. Positional-only parameters can be defined by including a ``/`` "
"character in the parameter list of the function definition after them, for "
"example *posonly1* and *posonly2* in the following::"
msgstr ""
":dfn:`θέσεως μόνο`: καθορίζει ένα όρισμα που μπορεί να παρέχεται μόνο από τη "
"θέση. Οι παράμετροι μόνο θέσης μπορούν να οριστούν συμπεριλαμβάνοντας έναν "
"χαρακτήρα ``/`` στη λίστα παραμέτρων του ορισμού συνάρτησης μετά από αυτές, "
"για παράδειγμα *posonly1* και *posonly2* στα εξής::"

#: glossary.rst:1040
msgid "def func(posonly1, posonly2, /, positional_or_keyword): ..."
msgstr "def func(posonly1, posonly2, /, positional_or_keyword): ..."

#: glossary.rst:1044
msgid ""
":dfn:`keyword-only`: specifies an argument that can be supplied only by "
"keyword.  Keyword-only parameters can be defined by including a single var-"
"positional parameter or bare ``*`` in the parameter list of the function "
"definition before them, for example *kw_only1* and *kw_only2* in the "
"following::"
msgstr ""
":dfn:`λέξης-κλειδί μόνο`: καθορίζει ένα όρισμα που μπορεί να παρέχεται μόνο "
"με λέξη κλειδί. Οι παράμετροι μόνο για λέξη-κλειδί μπορούν να οριστούν "
"συμπεριλαμβάνοντας μια παράμετρο θέσης ή σκέτο ``*`` στη λίστα παραμέτρων "
"του ορισμού συνάρτησης πριν από αυτές, για παράδειγμα *kw_only1* και "
"*kw_only2* στα ακόλουθα::"

#: glossary.rst:1050
msgid "def func(arg, *, kw_only1, kw_only2): ..."
msgstr "def func(arg, *, kw_only1, kw_only2): ..."

#: glossary.rst:1052
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`μεταβλητή θέσης`: καθορίζει ότι μπορεί να παρασχεθεί μια αυθαίρετη "
"ακολουθία ορισμάτων θέσης (επιπλέον των ορισμάτων θέσης που είναι ήδη "
"αποδεκτά από άλλες παραμέτρους). Μια τέτοια παράμετρος μπορεί να οριστεί "
"προσαρτώντας το όνομα της παραμέτρου με ``*``, για παράδειγμα *args* στα "
"ακόλουθα::"

#: glossary.rst:1058
msgid "def func(*args, **kwargs): ..."
msgstr "def func(*args, **kwargs): ..."

#: glossary.rst:1060
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be "
"provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`μεταβλητή λέξη-κλειδί`: καθορίζει ότι μπορούν να παρέχονται αυθαίρετα "
"πολλά ορίσματα λέξης-κλειδιού (επιπλέον των ορισμάτων λέξης κλειδιού που "
"είναι αποδεκτά από άλλες παραμέτρους).  Μια τέτοια παράμετρος μπορεί να "
"οριστεί προσαρτώντας το όνομα της παραμέτρου με ``**``, για παράδειγμα "
"*kwargs* όπως παραπάνω."

#: glossary.rst:1066
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Οι παράμετροι μπορούν να καθορίσουν τόσο τα προαιρετικά όσο και τα "
"απαιτούμενα ορίσματα , καθώς και προεπιλεγμένες τιμές για ορισμένα "
"προαιρετικά ορίσματα."

#: glossary.rst:1069
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"the :class:`inspect.Parameter` class, the :ref:`function` section, and :pep:"
"`362`."
msgstr ""
"Βλ. επίσης την :term:`argument` καταχώριση ευρετηρίου, την ερώτηση FAQ "
"σχετικά με :ref:`η διαφορά μεταξύ ορισμάτων και παραμέτρων <faq-argument-vs-"
"parameter>`, την κλάση :class:`inspect.Parameter`, την ενότητα :ref:"
"`function` και :pep:`362`."

#: glossary.rst:1073
msgid "path entry"
msgstr "path entry"

#: glossary.rst:1075
msgid ""
"A single location on the :term:`import path` which the :term:`path based "
"finder` consults to find modules for importing."
msgstr ""
"Μια μεμονωμένη τοποθεσία στο :term:`import path` την οποία συμβουλεύεται ο :"
"term:`path based finder` για να βρει modules για εισαγωγή."

#: glossary.rst:1077
msgid "path entry finder"
msgstr "path entry finder"

#: glossary.rst:1079
msgid ""
"A :term:`finder` returned by a callable on :data:`sys.path_hooks` (i.e. a :"
"term:`path entry hook`) which knows how to locate modules given a :term:"
"`path entry`."
msgstr ""
"Ένας :term:`finder` που επιστρέφεται από έναν καλούμενο στο :data:`sys."
"path_hooks` (δηλαδή ένα :term:`path entry hook`) που ξέρει πως να εντοπίζει "
"modules με :term:`path entry`."

#: glossary.rst:1083
msgid ""
"See :class:`importlib.abc.PathEntryFinder` for the methods that path entry "
"finders implement."
msgstr ""
"Βλ. :class:`importlib.abc.PathEntryFinder` για τις μεθόδους που ο entry "
"finder διαδρομής υλοποιεί."

#: glossary.rst:1085
msgid "path entry hook"
msgstr "path entry hook"

#: glossary.rst:1087
msgid ""
"A callable on the :data:`sys.path_hooks` list which returns a :term:`path "
"entry finder` if it knows how to find modules on a specific :term:`path "
"entry`."
msgstr ""
"Ένα καλούμενο στη λίστα :data:`sys.path_hooks`, το οποίο επιστρέφει ένα :"
"term:`path entry finder` εάν ξέρει πως να βρίσκει module σε μια "
"συγκεκριμένη :term:`path entry`."

#: glossary.rst:1090
msgid "path based finder"
msgstr "path based finder"

#: glossary.rst:1092
msgid ""
"One of the default :term:`meta path finders <meta path finder>` which "
"searches an :term:`import path` for modules."
msgstr ""
"Ένα από τα προεπιλεγμένα :term:`meta path finders <meta path finder>` που "
"αναζητά ένα :term:`import path` για modules."

#: glossary.rst:1094
msgid "path-like object"
msgstr "path-like αντικείμενο"

#: glossary.rst:1096
msgid ""
"An object representing a file system path. A path-like object is either a :"
"class:`str` or :class:`bytes` object representing a path, or an object "
"implementing the :class:`os.PathLike` protocol. An object that supports the :"
"class:`os.PathLike` protocol can be converted to a :class:`str` or :class:"
"`bytes` file system path by calling the :func:`os.fspath` function; :func:"
"`os.fsdecode` and :func:`os.fsencode` can be used to guarantee a :class:"
"`str` or :class:`bytes` result instead, respectively. Introduced by :pep:"
"`519`."
msgstr ""
"Ένα αντικείμενο που αντιπροσωπεύει ένα path συστήματος αρχείων. Ένα "
"αντικείμενο path είναι είτε ένα αντικείμενο :class:`str` ή :class:`bytes` "
"που αντιπροσωπεύει ένα path ή ένα αντικείμενο που υλοποιεί το πρωτόκολλο :"
"class:`os.PathLike`. Ένα αντικείμενο που υποστηρίζει το πρωτόκολλο :class:"
"`os.PathLike` μπορεί να μετατραπεί σε path συστήματος αρχείων :class:`str` "
"ή :class:`bytes` καλώντας την συνάρτηση :func:`os.fspath`' τα :func:`os."
"fsdecode` και :func:`os.fsencode` μπορούν να χρησιμοποιηθούν για την εγγύηση "
"ενός αποτελέσματος :class:`str` ή :class:`bytes`, αντίστοιχα. Εισήχθη από "
"τον :pep:`519`."

#: glossary.rst:1104
msgid "PEP"
msgstr "PEP"

#: glossary.rst:1106
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Πρόταση Βελτίωσης Python. Ένα PEP είναι ένα έγγραφο σχεδιασμού που παρέχει "
"πληροφορίες στην κοινότητα Python ή περιγράφει μια νέα δυνατότητα για την "
"Python ή τις διαδικασίες ή το περιβάλλον της. Τα PEP θα πρέπει να παρέχουν "
"μια συνοπτική τεχνική προδιαγραφή και μια λογική για τα προτεινόμενα "
"χαρακτηριστικά."

#: glossary.rst:1112
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"Τα PEP προορίζονται να είναι οι κύριοι μηχανισμοί για την πρόταση σημαντικών "
"νέων χαρακτηριστικών, για τη συλλογή πληροφοριών της κοινότητας για ένα "
"ζήτημα και για την τεκμηρίωση των αποφάσεων σχεδιασμού που έχουν εισαχθεί "
"στην Python. Ο συγγραφέας του PEP είναι υπεύθυνος για την οικοδόμηση "
"συναίνεσης εντός της κοινότητας και την τεκμηρίωση αντίθετων απόψεων."

#: glossary.rst:1118
msgid "See :pep:`1`."
msgstr "Βλ. :pep:`1`."

#: glossary.rst:1119
msgid "portion"
msgstr "τμήμα"

#: glossary.rst:1121
msgid ""
"A set of files in a single directory (possibly stored in a zip file) that "
"contribute to a namespace package, as defined in :pep:`420`."
msgstr ""
"Ένα σύνολο από αρχεία σε έναν μόνο κατάλογο (ενδεχομένως αποθηκευμένο σε "
"αρχείο *zip*) που συμβάλλουν σε ένα namespace πακέτο, όπως ορίζεται στο :pep:"
"`420`."

#: glossary.rst:1123
msgid "positional argument"
msgstr "όρισμα θέσης"

#: glossary.rst:1126
msgid "provisional API"
msgstr "provisional API"

#: glossary.rst:1128
msgid ""
"A provisional API is one which has been deliberately excluded from the "
"standard library's backwards compatibility guarantees.  While major changes "
"to such interfaces are not expected, as long as they are marked provisional, "
"backwards incompatible changes (up to and including removal of the "
"interface) may occur if deemed necessary by core developers.  Such changes "
"will not be made gratuitously -- they will occur only if serious fundamental "
"flaws are uncovered that were missed prior to the inclusion of the API."
msgstr ""
"Ένα provisional API είναι αυτό που έχει εσκεμμένα εξαιρεθεί από τις "
"backwards εγγυήσεις συμβατότητας της τυπικής βιβλιοθήκης. Αν και δεν "
"αναμένονται σημαντικές αλλαγές σε τέτοιες διεπαφές, εφόσον επισημαίνονται ως "
"προσωρινές, αλλαγές μη backwards συμβατότητας (μέχρι και κατάργηση της "
"διεπαφής) μπορεί να προκύψουν εάν κριθεί απαραίτητο από τους βασικούς "
"προγραμματιστές. Τέτοιες αλλαγές δεν θα γίνουν άσκοπα -- θα συμβούν μόνο εάν "
"αποκαλυφθούν σοβαρά θεμελιώδη ελαττώματα που παραλείφθηκαν πριν από τη "
"συμπερίληψη του API."

#: glossary.rst:1137
msgid ""
"Even for provisional APIs, backwards incompatible changes are seen as a "
"\"solution of last resort\" - every attempt will still be made to find a "
"backwards compatible resolution to any identified problems."
msgstr ""
"Ακόμη και για provisional API, οι μη backwards συμβατές αλλαγές θεωρούνται "
"\"λύση έσχατης ανάγκης\"- θα εξακολουθεί να γίνεται κάθε προσπάθεια για να "
"βρεθεί μια λύση backwards συμβατή σε τυχόν εντοπισμένα προβλήματα."

#: glossary.rst:1141
msgid ""
"This process allows the standard library to continue to evolve over time, "
"without locking in problematic design errors for extended periods of time.  "
"See :pep:`411` for more details."
msgstr ""
"Αυτή η διαδικασία επιτρέπει στην τυπική βιβλιοθήκη να συνεχίσει να "
"εξελίσσεται με την πάροδο του χρόνου, χωρίς να κλειδώνει προβληματικά "
"σφάλματα σχεδιασμού για εκτεταμένες χρονικές περιόδους. Βλ. :pep:`411` για "
"περισσότερες λεπτομέρειες."

#: glossary.rst:1144
msgid "provisional package"
msgstr "provisional πακέτο"

#: glossary.rst:1146
msgid "See :term:`provisional API`."
msgstr "Βλ. :term:`provisional API`."

#: glossary.rst:1147
msgid "Python 3000"
msgstr "Python 3000"

#: glossary.rst:1149
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated "
"\"Py3k\"."
msgstr ""
"Ψευδώνυμο για το σύνολο εκδόσεων Python 3.x (επινοήθηκε πριν από πολύ καιρό "
"όταν η κυκλοφορία της έκδοσης 3 ήταν κάτι στο μακρινό μέλλον.)  Αυτό "
"ονομάζεται επίσης ως συντομογραφία \"Py3k\"."

#: glossary.rst:1152
msgid "Pythonic"
msgstr "Pythonic"

#: glossary.rst:1154
msgid ""
"An idea or piece of code which closely follows the most common idioms of the "
"Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Μια ιδέα ή ένα κομμάτι κώδικα που ακολουθεί πιστά τα πιο κοινά ιδιώματα της "
"γλώσσας Python, αντί να υλοποιεί κώδικα χρησιμοποιώντας έννοιες κοινές σε "
"άλλες γλώσσες.  Για παράδειγμα, ένα κοινό ιδίωμα στην Python είναι να κάνει "
"μια επανάληψη πάνω από όλα τα στοιχεία ενός iterable χρησιμοποιώντας μια "
"δήλωση :keyword:`for`.  Πολλές άλλες γλώσσες που δεν έχουν αυτόν τον τύπο "
"κατασκευής, έτσι οι άνθρωποι που δεν είναι εξοικειωμένοι με την Python "
"χρησιμοποιούν μερικές φορές έναν αριθμητικό μετρητή::"

#: glossary.rst:1161
msgid ""
"for i in range(len(food)):\n"
"    print(food[i])"
msgstr ""
"for i in range(len(food)):\n"
"    print(food[i])"

#: glossary.rst:1164
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "Αντίθετα, μια πιο καθαρή μέθοδος Pythonic::"

#: glossary.rst:1166
msgid ""
"for piece in food:\n"
"    print(piece)"
msgstr ""
"for piece in food:\n"
"    print(piece)"

#: glossary.rst:1168
msgid "qualified name"
msgstr "αναγνωρισμένο όνομα"

#: glossary.rst:1170
msgid ""
"A dotted name showing the \"path\" from a module's global scope to a class, "
"function or method defined in that module, as defined in :pep:`3155`.  For "
"top-level functions and classes, the qualified name is the same as the "
"object's name::"
msgstr ""
"Ένα όνομα με κουκκίδες που δείχνει τη \"διαδρομή\" από το καθολικό εύρος "
"ενός module σε μια κλάση, συνάρτηση ή μέθοδο που ορίζεται σε αυτήν την "
"ενότητα, όπως ορίζεται στο :pep:`3155`. Για συναρτήσεις και κλάσεις ανώτατου "
"επιπέδου, το αναγνωρισμένο όνομα είναι ίδιο με το όνομα του αντικειμένου::"

#: glossary.rst:1175
msgid ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.__qualname__\n"
"'C'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"
msgstr ""
">>> class C:\n"
"...     class D:\n"
"...         def meth(self):\n"
"...             pass\n"
"...\n"
">>> C.__qualname__\n"
"'C'\n"
">>> C.D.__qualname__\n"
"'C.D'\n"
">>> C.D.meth.__qualname__\n"
"'C.D.meth'"

#: glossary.rst:1187
msgid ""
"When used to refer to modules, the *fully qualified name* means the entire "
"dotted path to the module, including any parent packages, e.g. ``email.mime."
"text``::"
msgstr ""
"Όταν χρησιμοποιείται για αναφορά σε modules , το *πλήρως αναγνωρισμένο "
"όνομα* σημαίνει ολόκληρο το διακεκομμένο path προς το module, "
"συμπεριλαμβανομένων τυχόν γονικών πακέτων π.χ. ``email.mime.text``::"

#: glossary.rst:1191
msgid ""
">>> import email.mime.text\n"
">>> email.mime.text.__name__\n"
"'email.mime.text'"
msgstr ""
">>> import email.mime.text\n"
">>> email.mime.text.__name__\n"
"'email.mime.text'"

#: glossary.rst:1194
msgid "reference count"
msgstr "πλήθος αναφοράς"

#: glossary.rst:1196
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Some objects are :term:`immortal` "
"and have reference counts that are never modified, and therefore the objects "
"are never deallocated.  Reference counting is generally not visible to "
"Python code, but it is a key element of the :term:`CPython` implementation.  "
"Programmers can call the :func:`sys.getrefcount` function to return the "
"reference count for a particular object."
msgstr ""
"Ο αριθμός των αναφορών σε ένα αντικείμενο.  Όταν το πλήθος αναφορών ενός "
"αντικειμένου πέσει στο μηδέν, κατανέμεται. Μερικά αντικείμενα είναι :term:"
"`immortal` και έχουν πλήθος αναφορών που δεν τροποποιούνται ποτέ και "
"επομένως τα αντικείμενα δεν κατανέμονται ποτέ. Η καταμέτρηση αναφορών γενικά "
"δεν είναι ορατή στον κώδικα της Python, αλλά είναι βασικό στοιχείο της "
"υλοποίησης :term:`CPython`. Οι προγραμματιστές μπορούν να καλέσουν τη "
"συνάρτηση :func:`sys.getrefcount` για να επιστρέψουν το πλήθος αναφοράς για "
"ένα συγκεκριμένο αντικείμενο."

#: glossary.rst:1204
msgid "regular package"
msgstr "κανονικό πακέτο"

#: glossary.rst:1206
msgid ""
"A traditional :term:`package`, such as a directory containing an ``__init__."
"py`` file."
msgstr ""
"Ένα παραδοσιακό :term:`package`, όπως ένας κατάλογος που περιέχει ένα "
"``__init__.py`` αρχείο."

#: glossary.rst:1209
msgid "See also :term:`namespace package`."
msgstr "Βλ. επίσης :term:`namespace package`."

#: glossary.rst:1210
msgid "REPL"
msgstr "REPL"

#: glossary.rst:1212
msgid ""
"An acronym for the \"read–eval–print loop\", another name for the :term:"
"`interactive` interpreter shell."
msgstr ""
"Ακρωνύμιο του \"read–eval–print loop\", άλλη ονομασία για το :term:"
"`interactive` περιβάλλον του διερμηνέα."

#: glossary.rst:1214
msgid "__slots__"
msgstr "__slots__"

#: glossary.rst:1216
msgid ""
"A declaration inside a class that saves memory by pre-declaring space for "
"instance attributes and eliminating instance dictionaries.  Though popular, "
"the technique is somewhat tricky to get right and is best reserved for rare "
"cases where there are large numbers of instances in a memory-critical "
"application."
msgstr ""
"Μια δήλωση μέσα σε μια κλάση που εξοικονομεί μνήμη δηλώνοντας εκ των "
"προτέρων χώρο για παράδειγμα χαρακτηριστικά και εξαλείφοντας λεξικά "
"στιγμιοτύπων.  Αν και δημοφιλής, η τεχνική είναι κάπως δύσκολο να γίνει "
"σωστή και προορίζεται καλύτερα για σπάνιες περιπτώσεις όπου υπάρχει μεγάλος "
"αριθμός στιγμιοτύπων σε μια εφαρμογή κρίσιμης-μνήμης."

#: glossary.rst:1221
msgid "sequence"
msgstr "ακολουθία"

#: glossary.rst:1223
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`~object.__getitem__` special method and defines a :"
"meth:`~object.__len__` method that returns the length of the sequence. Some "
"built-in sequence types are :class:`list`, :class:`str`, :class:`tuple`, "
"and :class:`bytes`. Note that :class:`dict` also supports :meth:`~object."
"__getitem__` and :meth:`!__len__`, but is considered a mapping rather than a "
"sequence because the lookups use arbitrary :term:`hashable` keys rather than "
"integers."
msgstr ""
"Ένας :term:`iterable` που υποστηρίζει την αποτελεσματική πρόσβαση στο "
"στοιχείο χρησιμοποιώντας ακέραιους δείκτες μέσω της ειδική μεθόδου :meth:"
"`~object.__getitem__` και ορίζει μια μέθοδο :meth:`~object.__len__` που "
"επιστρέφει το μήκος της ακολουθίας. Ορισμένοι ενσωματωμένοι τύποι ακολουθιών "
"είναι :class:`list`, :class:`str`, :class:`tuple`, και :class:`bytes`. "
"Σημειώστε ότι το :class:`dict` υποστηρίζει επίσης :meth:`~object."
"__getitem__` και :meth:`!__len__`, αλλά θεωρείται αντιστοίχιση και όχι "
"ακολουθία επειδή οι αναζητήσεις χρησιμοποιούν αυθαίρετα :term:`hashable` "
"κλειδιά παρά ακέραιοι."

#: glossary.rst:1232
msgid ""
"The :class:`collections.abc.Sequence` abstract base class defines a much "
"richer interface that goes beyond just :meth:`~object.__getitem__` and :meth:"
"`~object.__len__`, adding :meth:`!count`, :meth:`!index`, :meth:`~object."
"__contains__`, and :meth:`~object.__reversed__`. Types that implement this "
"expanded interface can be registered explicitly using :func:`~abc.ABCMeta."
"register`. For more documentation on sequence methods generally, see :ref:"
"`Common Sequence Operations <typesseq-common>`."
msgstr ""
"Η αφηρημένη βασική κλάση :class:`collections.abc.Sequence` ορίζει μια πολύ "
"πιο πλούσια διεπαφή που ξεπερνά τα απλά :meth:`~object.__getitem__` και :"
"meth:`~object.__len__`, adding :meth:`!count`, :meth:`!index`, :meth:"
"`~object.__contains__`, και :meth:`~object.__reversed__`. Οι τύποι που "
"υλοποιούν αυτήν την διευρυμένη διεπαφή μπορούν να καταχωρηθούν ρητά "
"χρησιμοποιώντας :func:`~abc.ABCMeta.register`. Για περισσότερη τεκμηρίωση "
"σχετικά με τις μεθόδους ακολουθίας γενικά, ανατρέξτε στο :ref:`Common "
"Sequence Operations <typesseq-common>`."

#: glossary.rst:1241
msgid "set comprehension"
msgstr "set comprehension"

#: glossary.rst:1243
msgid ""
"A compact way to process all or part of the elements in an iterable and "
"return a set with the results. ``results = {c for c in 'abracadabra' if c "
"not in 'abc'}`` generates the set of strings ``{'r', 'd'}``.  See :ref:"
"`comprehensions`."
msgstr ""
"Ένας συμπαγής τρόπος για να επεξεργαστείτε όλα ή μέρος των στοιχείων σε ένα "
"iterable και να επιστραφεί ένα σύνολο με τα αποτελέσματα. ``results = {c for "
"c in 'abracadabra' if c not in 'abc'}`` δημιουργεί το σύνολο συμβολοσειρών "
"``{'r', 'd'}``. Βλ. :ref:`comprehensions`."

#: glossary.rst:1247
msgid "single dispatch"
msgstr "μοναδικό dispatch"

#: glossary.rst:1249
msgid ""
"A form of :term:`generic function` dispatch where the implementation is "
"chosen based on the type of a single argument."
msgstr ""
"Μια μορφή dispatch :term:`generic function` όπου η υλοποίηση επιλέγεται με "
"βάση τον τύπο ενός μεμονωμένου ορίσματος."

#: glossary.rst:1251
msgid "slice"
msgstr "slice"

#: glossary.rst:1253
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally."
msgstr ""
"Ένα αντικείμενο που συνήθως περιέχει ένα τμήμα μιας ακολουθίας :term:"
"`sequence`.  Δημιουργείται ένα slice χρησιμοποιώντας τη σημείωση subscript, "
"``[]`` με άνω και κάτω τελείες μεταξύ αριθμών όταν δίνονται πολλοί, όπως στο "
"``variable_name[1:3:5]``.  Η σημείωση αγκύλης (subscript) χρησιμοποιεί "
"εσωτερικά αντικείμενα :class:`slice`."

#: glossary.rst:1257
msgid "soft deprecated"
msgstr "απαρχαιωμένη με ήπιο τρόπο"

#: glossary.rst:1259
msgid ""
"A soft deprecated API should not be used in new code, but it is safe for "
"already existing code to use it. The API remains documented and tested, but "
"will not be enhanced further."
msgstr ""
"Ένα απαρχαιωμένο με ήπιο τρόπο API δεν θα πρέπει να χρησιμοποιείται σε νέο "
"κώδικα, αλλά είναι ασφαλές σε ήδη υπάρχοντα κώδικα να το χρησιμοποιεί. Το "
"API παραμένει τεκμηριωμένο και δοκιμασμένο, αλλά δεν θα ενισχυθεί περαιτέρω."

#: glossary.rst:1263
msgid ""
"Soft deprecation, unlike normal deprecation, does not plan on removing the "
"API and will not emit warnings."
msgstr ""
"Η κατάργηση με ήπιο τρόπο, σε αντίθεση με την κανονική κατάργηση, δεν "
"σχεδιάζει την κατάργηση του API και δεν θα εκπέμπει ειδοποιήσεις"

#: glossary.rst:1266
msgid ""
"See `PEP 387: Soft Deprecation <https://peps.python.org/pep-0387/#soft-"
"deprecation>`_."
msgstr ""
"Δείτε `PEP 387: Soft Deprecation <https://peps.python.org/pep-0387/#soft-"
"deprecation>`_."

#: glossary.rst:1268
msgid "special method"
msgstr "ειδική μέθοδος"

#: glossary.rst:1272
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in :ref:"
"`specialnames`."
msgstr ""
"Μια μέθοδος που καλείται σιωπηρά από την Python για να εκτελέσει μια "
"συγκεκριμένη λειτουργία σε έναν τύπο, όπως η προσθήκη. Τέτοιες μέθοδοι "
"έχουνε ονόματα που ξεκινούν και τελειώνουν με διπλές κάτω παύλες. Οι ειδικές "
"μέθοδοι τεκμηριώνονται στο :ref:`specialnames`."

#: glossary.rst:1276
msgid "statement"
msgstr "δήλωση"

#: glossary.rst:1278
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either "
"an :term:`expression` or one of several constructs with a keyword, such as :"
"keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Μια πρόταση είναι μέρος μιας σουίτας (ένα \"μπλοκ\" κώδικα). Μια πρόταση "
"είναι είτε ένας :term:`expression` είτε μια από πολλές δομές με μια λέξη-"
"κλειδί όπως :keyword:`if`, :keyword:`while` ή :keyword:`for`."

#: glossary.rst:1281
msgid "static type checker"
msgstr "ελεγκτής στατικού τύπου"

#: glossary.rst:1283
msgid ""
"An external tool that reads Python code and analyzes it, looking for issues "
"such as incorrect types. See also :term:`type hints <type hint>` and the :"
"mod:`typing` module."
msgstr ""
"Ένα εξωτερικό εργαλείο όπου διαβάζει τον Python κώδικα και τον αναλύει, "
"αναζητώντας προβλήματα όπως λανθασμένοι τύποι. Βλ. επίσης :term:`type hints "
"<type hint>` και το module :mod:`typing`."

#: glossary.rst:1286
msgid "strong reference"
msgstr "strong reference"

#: glossary.rst:1288
msgid ""
"In Python's C API, a strong reference is a reference to an object which is "
"owned by the code holding the reference.  The strong reference is taken by "
"calling :c:func:`Py_INCREF` when the reference is created and released with :"
"c:func:`Py_DECREF` when the reference is deleted."
msgstr ""
"Στο C API της Python, μια ισχυρή αναφορά είναι μια αναφορά σε ένα "
"αντικείμενο που ανήκει στον κώδικα που περιέχει την αναφορά. Η ισχυρή "
"αναφορά λαμβάνεται καλώντας το :c:func:`Py_INCREF` όταν η αναφορά "
"δημιουργείται και απελευθερώνεται με :c:func:`Py_DECREF` όταν διαγραφεί η "
"αναφορά."

#: glossary.rst:1294
msgid ""
"The :c:func:`Py_NewRef` function can be used to create a strong reference to "
"an object. Usually, the :c:func:`Py_DECREF` function must be called on the "
"strong reference before exiting the scope of the strong reference, to avoid "
"leaking one reference."
msgstr ""
"Η συνάρτηση :c:func:`Py_NewRef` μπορεί να χρησιμοποιηθεί για τη δημιουργία "
"ισχυρής αναφοράς σε ένα αντικείμενο. Συνήθως, η συνάρτηση :c:func:"
"`Py_DECREF` πρέπει να καλείται στην ισχυρή αναφορά πριν βγει από το εύρος "
"της ισχυρής αναφοράς, για να αποφευχθεί η διαρροή μιας αναφοράς."

#: glossary.rst:1299
msgid "See also :term:`borrowed reference`."
msgstr "Βλ. επίσης :term:`borrowed reference`."

#: glossary.rst:1300
msgid "text encoding"
msgstr "κωδικοποίηση κειμένου"

#: glossary.rst:1302
msgid ""
"A string in Python is a sequence of Unicode code points (in range "
"``U+0000``--``U+10FFFF``). To store or transfer a string, it needs to be "
"serialized as a sequence of bytes."
msgstr ""
"Μια συμβολοσειρά στην Python είναι μια ακολουθία σημείων κώδικα Unicode (στο "
"εύρος ``U+0000``--``U+10FFFF``). Για να αποθηκεύσετε ή να μεταφέρετε μια "
"συμβολοσειρά, πρέπει να σειριοποιηθεί ως δυαδική ακολουθία."

#: glossary.rst:1306
msgid ""
"Serializing a string into a sequence of bytes is known as \"encoding\", and "
"recreating the string from the sequence of bytes is known as \"decoding\"."
msgstr ""
"Η σειριοποίηση μιας συμβολοσειράς σε μια δυαδική ακολουθία είναι γνωστή ως "
"\"κωδικοποίηση\" , και η αναδημιουργία της συμβολοσειράς από την δυαδική "
"ακολουθία είναι γνωστή ως \"αποκωδικοποίηση\"."

#: glossary.rst:1309
msgid ""
"There are a variety of different text serialization :ref:`codecs <standard-"
"encodings>`, which are collectively referred to as \"text encodings\"."
msgstr ""
"Υπάρχει μια ποικιλία διαφορετικής σειριοποίησης κειμένου :ref:`codecs "
"<standard-encodings>`, οι οποίοι συλλογικά αναφέρονται ως \"κωδικοποιήσεις "
"κειμένου\"."

#: glossary.rst:1312
msgid "text file"
msgstr "αρχείο κειμένου"

#: glossary.rst:1314
msgid ""
"A :term:`file object` able to read and write :class:`str` objects. Often, a "
"text file actually accesses a byte-oriented datastream and handles the :term:"
"`text encoding` automatically. Examples of text files are files opened in "
"text mode (``'r'`` or ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, and "
"instances of :class:`io.StringIO`."
msgstr ""
"Ένα :term:`file object` ικανό να διαβάζει και να γράφει αντικείμενα :class:"
"`str`. Συχνά, ένα αρχείο κειμένου αποκτά πραγματικά πρόσβαση σε μια ροή "
"δυαδική ροή δεδομένων και χειρίζεται αυτόματα την :term:`text encoding`. "
"Παραδείγματα αρχείων κειμένου είναι αρχεία που ανοίγουν σε λειτουργία "
"κειμένου (``'r'`` ή ``'w'``), :data:`sys.stdin`, :data:`sys.stdout`, και "
"στιγμιότυπα του :class:`io.StringIO`."

#: glossary.rst:1321
msgid ""
"See also :term:`binary file` for a file object able to read and write :term:"
"`bytes-like objects <bytes-like object>`."
msgstr ""
"Βλ. επίσης :term:`binary file` για ένα αντικείμενο αρχείου με δυνατότητα "
"ανάγνωσης και εγγραφής :term:`δυαδικά αντικείμενα <bytes-like object>`."

#: glossary.rst:1323
msgid "thread state"
msgstr "κατάσταση νήματος"

#: glossary.rst:1326
msgid ""
"The information used by the :term:`CPython` runtime to run in an OS thread. "
"For example, this includes the current exception, if any, and the state of "
"the bytecode interpreter."
msgstr ""
"Οι πληροφορίες που χρησιμοποιούνται από τη ροή εκτέλεσης της :term:`CPython` "
"για την εκτέλεση σε ένα νήμα λειτουργικού συστήματος. Για παράδειγμα, αυτό "
"περιλαμβάνει την τρέχουσα εξαίρεση, εάν υπάρχει, και την κατάσταση του "
"διερμηνέα bytecode."

#: glossary.rst:1330
msgid ""
"Each thread state is bound to a single OS thread, but threads may have many "
"thread states available.  At most, one of them may be :term:`attached "
"<attached thread state>` at once."
msgstr ""
"Κάθε κατάσταση νήματος είναι συνδεδεμένη με ένα μόνο νήμα λειτουργικού "
"συστήματος, αλλά τα νήματα μπορεί να έχουν πολλές διαθέσιμες καταστάσεις "
"νήματος.  Το πολύ, μία από αυτές μπορεί να είναι :term:`attached <attached "
"thread state>` ταυτόχρονα."

#: glossary.rst:1334
msgid ""
"An :term:`attached thread state` is required to call most of Python's C API, "
"unless a function explicitly documents otherwise. The bytecode interpreter "
"only runs under an attached thread state."
msgstr ""
"Απαιτείται ένα :term:`attached thread state` για την κλήση του μεγαλύτερου "
"μέρους του C API της Python, εκτός εάν μια συνάρτηση τεκμηριώνεται ρητά από "
"το αντίθετο. Ο διερμηνέας bytecode εκτελείται μόνο υπό κατάσταση συνημμένου "
"νήματος."

#: glossary.rst:1338
msgid ""
"Each thread state belongs to a single interpreter, but each interpreter may "
"have many thread states, including multiple for the same OS thread. Thread "
"states from multiple interpreters may be bound to the same thread, but only "
"one can be :term:`attached <attached thread state>` in that thread at any "
"given moment."
msgstr ""
"Κάθε κατάσταση νήματος ανήκει σε έναν μόνο διερμηνέα, αλλά κάθε διερμηνέα "
"μπορεί να έχει πολλές καταστάσεις νήματος, συμπεριλαμβανομένων πολλαπλών για "
"το ίδιο νήμα λειτουργικού συστήματος. Οι καταστάσεις νήματος από πολλαπλούς "
"διερμηνείς μπορεί να είναι συνδεδεμένος με το ίδιο νήμα, αλλά μόνο μία "
"μπορεί να είναι :term:`attached <attached thread state>` σε αυτό το νήμα σε "
"οποιαδήποτε δεδομένη στιγμή."

#: glossary.rst:1344
msgid ""
"See :ref:`Thread State and the Global Interpreter Lock <threads>` for more "
"information."
msgstr ""
"Δείτε το :ref:`Thread State and the Global Interpreter Lock <threads>` για "
"περισσότερες πληροφορίες."

#: glossary.rst:1346
msgid "token"
msgstr "λεκτικό σύμβολο (token)"

#: glossary.rst:1349
msgid ""
"A small unit of source code, generated by the :ref:`lexical analyzer "
"<lexical>` (also called the *tokenizer*). Names, numbers, strings, "
"operators, newlines and similar are represented by tokens."
msgstr ""
"Μια μικρή μονάδα πηγαίου κώδικα, που παράγεται από τον :ref:`lexical "
"analyzer <lexical>` (γνωστό και ως *αναλυτή (tokenizer)*). Ονόματα, αριθμοί, "
"συμβολοσειρές, τελεστές αλλαγές γραμμής και παρόμοια στοιχεία αναπαρίστανται "
"ως λεκτικά σύμβολα (tokens)."

#: glossary.rst:1354
msgid ""
"The :mod:`tokenize` module exposes Python's lexical analyzer. The :mod:"
"`token` module contains information on the various types of tokens."
msgstr ""
"Το module :mod:`tokenize` εκθέτει τον λεξικό αναλυτή της Python. Το module :"
"mod:`token` περιέχει πληροφορίες για τους διάφορους τύπους λεκτικών συμβόλων "
"(tokens)."

#: glossary.rst:1357
msgid "triple-quoted string"
msgstr "συμβολοσειρά τριπλών εισαγωγικών"

#: glossary.rst:1359
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Μια συμβολοσειρά που δεσμεύεται από τρεις περιπτώσεις είτε ενός εισαγωγικού "
"(\") ή μιας αποστρόφου ('). Αν και δεν παρέχουν καμία λειτουργικότητα που "
"δεν είναι διαθέσιμη με συμβολοσειρές με μονά εισαγωγικά, είναι χρήσιμες για "
"διαφόρους λόγους. Σας επιτρέπουν να συμπεριλάβετε μονά και διπλά εισαγωγικά "
"χωρίς διαφυγή σε μια συμβολοσειρά και μπορούν να εκτείνονται σε πολλές "
"γραμμές χωρίς τη χρήση του χαρακτήρα συνέχεια, καθιστώντας τα ιδιαίτερα "
"χρήσιμα κατά τη σύνταξη εγγράφων με συμβολοσειρές."

#: glossary.rst:1366
msgid "type"
msgstr "τύπος"

#: glossary.rst:1368
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its :attr:`~object."
"__class__` attribute or can be retrieved with ``type(obj)``."
msgstr ""
"Ο τύπος ενός Python αντικειμένου καθορίζει τι είδους αντικείμενο είναι∙ κάθε "
"αντικείμενο έχει έναν τύπο. Ο τύπος ενός αντικειμένου είναι προσβάσιμος ως "
"το χαρακτηριστικό :attr:`~object.__class__` ή μπορεί να ανακτηθεί με "
"``type(obj)``."

#: glossary.rst:1372
msgid "type alias"
msgstr "type alias"

#: glossary.rst:1374
msgid "A synonym for a type, created by assigning the type to an identifier."
msgstr ""
"Ένα συνώνυμο για έναν τύπο, που δημιουργείται με την ανάθεση τύπου σε ένα "
"αναγνωριστικό."

#: glossary.rst:1376
msgid ""
"Type aliases are useful for simplifying :term:`type hints <type hint>`. For "
"example::"
msgstr ""
"Τα type aliases είναι χρήσιμα για την απλοποίηση :term:`type alias <type "
"hint>`. Για παράδειγμα::"

#: glossary.rst:1379
msgid ""
"def remove_gray_shades(\n"
"        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n"
"    pass"
msgstr ""
"def remove_gray_shades(\n"
"        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n"
"    pass"

#: glossary.rst:1383
msgid "could be made more readable like this::"
msgstr "μπορεί να γίνει πιο ευανάγνωστο όπως::"

#: glossary.rst:1385
msgid ""
"Color = tuple[int, int, int]\n"
"\n"
"def remove_gray_shades(colors: list[Color]) -> list[Color]:\n"
"    pass"
msgstr ""
"Color = tuple[int, int, int]\n"
"\n"
"def remove_gray_shades(colors: list[Color]) -> list[Color]:\n"
"    pass"

#: glossary.rst:1404
msgid "See :mod:`typing` and :pep:`484`, which describe this functionality."
msgstr ""
"Βλ. :mod:`typing` και :pep:`484`, που περιγράφει αυτήν την λειτουργικότητα."

#: glossary.rst:1391
msgid "type hint"
msgstr "type hint"

#: glossary.rst:1393
msgid ""
"An :term:`annotation` that specifies the expected type for a variable, a "
"class attribute, or a function parameter or return value."
msgstr ""
"Ένας :term:`annotation` που καθορίζει τον αναμενόμενο τύπο για μια "
"μεταβλητή, ένα χαρακτηριστικό κλάσης ή μια παράμετρο συνάρτησης ή τιμή "
"επιστροφής."

#: glossary.rst:1396
msgid ""
"Type hints are optional and are not enforced by Python but they are useful "
"to :term:`static type checkers <static type checker>`. They can also aid "
"IDEs with code completion and refactoring."
msgstr ""
"Οι υποδείξεις τύπων (type hints) είναι προαιρετικές και δεν επιβάλλονται από "
"την Python, αλλά είναι χρήσιμες για :term:`static type checkers <static type "
"checker>`. Μπορούν επίσης να βοηθήσουν τους IDEs με τη συμπλήρωση και την "
"αναδιαμόρφωση κώδικα."

#: glossary.rst:1400
msgid ""
"Type hints of global variables, class attributes, and functions, but not "
"local variables, can be accessed using :func:`typing.get_type_hints`."
msgstr ""
"Υποδείξεις τύπου (type hints) για καθολικές μεταβλητές, χαρακτηριστικά "
"κλάσης και συναρτήσεις , αλλά όχι τοπικές μεταβλητές, μπορούν να "
"προσπελαστούν χρησιμοποιώντας το :func:`typing.get_type_hints`."

#: glossary.rst:1405
msgid "universal newlines"
msgstr "καθολικές νέες γραμμές"

#: glossary.rst:1407
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention "
"``'\\r'``.  See :pep:`278` and :pep:`3116`, as well as :func:`bytes."
"splitlines` for an additional use."
msgstr ""
"Ένα τρόπος ερμηνείας ροών κειμένου στον οποίο όλα τα ακόλουθα αναγνωρίζονται "
"ως λήξεις μιας γραμμής: η σύμβαση τέλους γραμμής του Unix ``'\\n'``, η "
"σύμβαση των Windows ``'\\r\\n'``, και την παλιά σύμβαση Macintosh ``'\\r'``. "
"Βλ. :pep:`278` και :pep:`3116`, καθώς και :func:`bytes.splitlines` για "
"πρόσθετη χρήση."

#: glossary.rst:1412
msgid "variable annotation"
msgstr "annotation μεταβλητής"

#: glossary.rst:1414
msgid "An :term:`annotation` of a variable or a class attribute."
msgstr "Ένας :term:`annotation` μια μεταβλητής ή ενός χαρακτηριστικού κλάσης."

#: glossary.rst:1416
msgid ""
"When annotating a variable or a class attribute, assignment is optional::"
msgstr ""
"Όταν annotating μια μεταβλητή ή ένα χαρακτηριστικό κλάσης, η ανάθεση είναι "
"προαιρετική::"

#: glossary.rst:1418
msgid ""
"class C:\n"
"    field: 'annotation'"
msgstr ""
"class C:\n"
"    field: 'annotation'"

#: glossary.rst:1421
msgid ""
"Variable annotations are usually used for :term:`type hints <type hint>`: "
"for example this variable is expected to take :class:`int` values::"
msgstr ""
"Τα annotations μεταβλητών χρησιμοποιούνται συνήθως για :term:`type hints "
"<type hint>`: για παράδειγμα αυτή η μεταβλητή αναμένεται να λάβει τιμές :"
"class:`int`::"

#: glossary.rst:1425
msgid "count: int = 0"
msgstr "count: int = 0"

#: glossary.rst:1427
msgid "Variable annotation syntax is explained in section :ref:`annassign`."
msgstr ""
"Η σύνταξη annotation μεταβλητής περιγράφεται στην ενότητα :ref:`annassign`."

#: glossary.rst:1429
msgid ""
"See :term:`function annotation`, :pep:`484` and :pep:`526`, which describe "
"this functionality. Also see :ref:`annotations-howto` for best practices on "
"working with annotations."
msgstr ""
"Βλ. :term:`function annotation`, :pep:`484` και :pep:`526`, που περιγράφουν "
"αυτή τη λειτουργία. Δείτε επίσης :ref:`annotations-howto` για βέλτιστες "
"πρακτικές σχετικά με την εργασία με σχολιασμούς."

#: glossary.rst:1433
msgid "virtual environment"
msgstr "virtual environment"

#: glossary.rst:1435
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Ένα συνεργατικά απομονωμένο περιβάλλον χρόνου εκτέλεσης που επιτρέπει στους "
"χρήστες και τις εφαρμογές της Python να εγκαταστήσουν και να αναβαθμίσουν "
"πακέτα διανομής Python χωρίς να παρεμβαίνουν στη συμπεριφορά άλλων εφαρμογών "
"Python που εκτελούνται στο ίδιο σύστημα."

#: glossary.rst:1440
msgid "See also :mod:`venv`."
msgstr "Βλ. επίσης :mod:`venv`."

#: glossary.rst:1441
msgid "virtual machine"
msgstr "virtual machine"

#: glossary.rst:1443
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Ένας υπολογιστής ορίζεται εξ ολοκλήρου από το λογισμικό. Η εικονική μηχανή "
"της Python εκτελεί το :term:`bytecode` που εκπέμπεται από τον μεταγλωττιστή "
"bytecode."

#: glossary.rst:1445
msgid "Zen of Python"
msgstr "Zen της Python"

#: glossary.rst:1447
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Κατάλογος σχεδιαστικών αρχών και φιλοσοφιών που είναι χρήσιμες για την "
"κατανόηση και τη χρήση της γλώσσας. Ο κατάλογος μπορεί να βρεθεί "
"πληκτρολογώντας \"``import this``\" στην διαδραστική κονσόλα."

#: glossary.rst:319
msgid "C-contiguous"
msgstr "C-contiguous"

#: glossary.rst:319
msgid "Fortran contiguous"
msgstr "Fortran contiguous"

#: glossary.rst:870
msgid "magic"
msgstr "magic"

#: glossary.rst:1270
msgid "special"
msgstr "special"

#~ msgid "2to3"
#~ msgstr "2to3"

#~ msgid ""
#~ "A tool that tries to convert Python 2.x code to Python 3.x code by "
#~ "handling most of the incompatibilities which can be detected by parsing "
#~ "the source and traversing the parse tree."
#~ msgstr ""
#~ "Ένα εργαλείο που προσπαθεί να μετατρέψει τον κώδικα Python 2.x σε κώδικα "
#~ "Python 3.x διαχειρίζοντας τις περισσότερες ασυμβατότητες που μπορούν να "
#~ "εντοπιστούν αναλύοντας την πηγή και διασχίζοντας το δέντρο ανάλυσης."

#~ msgid ""
#~ "2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
#~ "entry point is provided as :file:`Tools/scripts/2to3`.  See :ref:`2to3-"
#~ "reference`."
#~ msgstr ""
#~ "2to3 είναι διαθέσιμο στην στάνταρ βιβλιοθήκη ως :mod:`lib2to3`, παρέχεται "
#~ "ένα σημείο εισόδου ως :file:`Tools/scripts/2to3`. Βλ. :ref:`2to3-"
#~ "reference`."

#~ msgid ""
#~ "An object which controls the environment seen in a :keyword:`with` "
#~ "statement by defining :meth:`~object.__enter__` and :meth:`~object."
#~ "__exit__` methods. See :pep:`343`."
#~ msgstr ""
#~ "Ένα αντικείμενο που ελέγχει το περιβάλλον που εμφανίζεται σε μια δήλωση :"
#~ "keyword:`with` ορίζοντας τις μεθόδους :meth:`~object.__enter__` και :meth:"
#~ "`~object.__exit__`. Βλ. :pep:`343`."

#~ msgid ""
#~ "A variable which can have different values depending on its context. This "
#~ "is similar to Thread-Local Storage in which each execution thread may "
#~ "have a different value for a variable. However, with context variables, "
#~ "there may be several contexts in one execution thread and the main usage "
#~ "for context variables is to keep track of variables in concurrent "
#~ "asynchronous tasks. See :mod:`contextvars`."
#~ msgstr ""
#~ "Μια μεταβλητή που μπορεί να έχει πολλές διαφορετικές τιμές ανάλογα με το "
#~ "context. Αυτό είναι κοινό στο Thread-Local Storage όπου κάθε εκτέλεση του "
#~ "νήματος μπορεί να έχει διαφορετική τιμή για μια μεταβλητή. Παρόλα αυτά, "
#~ "με τις context μεταβλητές, μπορεί να υπάρχουν πολλά περιβάλλοντα σε ένα "
#~ "νήμα εκτέλεσης και η κύρια χρήση για τις context μεταβλητές είναι η "
#~ "παρακολούθηση των μεταβλητών σε ταυτόχρονες διεργασίες. Βλ. :mod:"
#~ "`contextvars`."

#~ msgid ""
#~ "Past efforts to create a \"free-threaded\" interpreter (one which locks "
#~ "shared data at a much finer granularity) have not been successful because "
#~ "performance suffered in the common single-processor case. It is believed "
#~ "that overcoming this performance issue would make the implementation much "
#~ "more complicated and therefore costlier to maintain."
#~ msgstr ""
#~ "Προηγούμενες προσπάθειες να δημιουργηθεί ένας διερμηνέας \"ελεύθερων-"
#~ "νημάτων\" (αυτός που κλειδώνει τα κοινόχρηστα δεδομένα με πολύ πιο "
#~ "λεπτομερή ευαισθησία) δεν ήταν επιτυχείς επειδή η απόδοση υποχώρησε στην "
#~ "κοινή περίπτωση ενός επεξεργαστή. Πιστεύεται ότι η υπέρβαση αυτού του "
#~ "προβλήματος απόδοσης θα κάνουν πολύ πιο περίπλοκη και επομένως πιο "
#~ "δαπανηρή στην συντήρηση."
